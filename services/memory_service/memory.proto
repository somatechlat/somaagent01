syntax = "proto3";

package sa01.memory.v1;

option go_package = "github.com/soma/sa01/memory/v1";

message MemoryRecord {
  string id = 1;
  string tenant = 2;
  string persona_id = 3;
  string content = 4;
  map<string, string> metadata = 5;
  int64 created_at_ms = 6;
}

message CreateMemoryRequest {
  string tenant = 1;
  string persona_id = 2;
  string content = 3;
  map<string, string> metadata = 4;
}

message CreateMemoryResponse {
  MemoryRecord record = 1;
}

message GetMemoryRequest {
  string id = 1;
}

message GetMemoryResponse {
  MemoryRecord record = 1;
}

message ListMemoriesRequest {
  string tenant = 1;
  string persona_id = 2;
  int32 limit = 3;
}

message ListMemoriesResponse {
  repeated MemoryRecord records = 1;
}

service MemoryService {
  rpc CreateMemory(CreateMemoryRequest) returns (CreateMemoryResponse);
  rpc GetMemory(GetMemoryRequest) returns (GetMemoryResponse);
  rpc ListMemories(ListMemoriesRequest) returns (ListMemoriesResponse);
  // Server-side streaming search over memories by simple text query.
  // Matches against content or metadata stringified value; results are
  // ordered by created_at DESC and limited by `limit`.
  rpc SearchMemories(SearchMemoriesRequest) returns (stream MemoryRecord);
}

message SearchMemoriesRequest {
  string tenant = 1;
  string persona_id = 2;
  string query = 3; // substring to search in content (case-insensitive)
  int32 limit = 4;  // maximum number of records to stream
}
