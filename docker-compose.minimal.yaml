# MINIMAL WORKING ARCHITECTURE - Only essential services
x-agent-env: &agent-env
  PYTHONPATH: /a0:/a0/services:/a0/common:/a0/python
  LOG_LEVEL: INFO
  KAFKA_BOOTSTRAP_SERVERS: kafka:9092
  REDIS_URL: redis://redis:6379/0
  POSTGRES_DSN: postgresql://soma:soma@postgres:5432/somaagent01
  CONVERSATION_INBOUND: conversation.inbound
  CONVERSATION_OUTBOUND: conversation.outbound
  TOOL_REQUESTS_TOPIC: tool.requests
  TOOL_RESULTS_TOPIC: tool.results
  OPA_URL: http://opa:8181
  POLICY_FAIL_OPEN: "true"
  SOMA_AGENT_MODE: LOCAL
  TENANT_CONFIG_PATH: /a0/conf/tenants.yaml
  SKM_BASE_URL: http://host.docker.internal:9696
  GATEWAY_JWT_SECRET: dev-secret
  GATEWAY_REQUIRE_AUTH: "false"

x-agent-service: &agent-service
  image: somaagent01-minimal:local
  build:
    context: .
    dockerfile: DockerfileMinimal
  working_dir: /a0
  volumes:
    - ./:/a0:ro
    - ./memory:/a0/memory
    - ./logs:/a0/logs
  extra_hosts:
    - "host.docker.internal:host-gateway"
  restart: unless-stopped

services:
  # Infrastructure services
  postgres:
    image: postgres:16-alpine
    container_name: soma_postgres
    environment:
      POSTGRES_USER: soma
      POSTGRES_PASSWORD: soma
      POSTGRES_DB: somaagent01
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U soma -d somaagent01"]
      interval: 10s
      timeout: 5s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: soma_redis
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    image: bitnami/kafka:latest
    container_name: soma_kafka
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: "1"
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_KRAFT_CLUSTER_ID: "soma-cluster-01"
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD", "true"]
      interval: 30s
      timeout: 10s
      retries: 3

  opa:
    image: openpolicyagent/opa:0.64.0
    container_name: soma_opa
    command: ["run", "--server", "--set=decision_logs.console=true"]
    ports:
      - "8181:8181"

  # Application services
  gateway:
    <<: *agent-service
    container_name: soma_gateway
    command: ["python3", "-m", "uvicorn", "services.gateway.main:app", "--host", "0.0.0.0", "--port", "8010"]
    environment:
      <<: *agent-env
      PORT: "8010"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      opa:
        condition: service_started
    ports:
      - "8010:8010"

  conversation-worker:
    <<: *agent-service
    container_name: soma_conversation_worker
    command: ["python3", "-m", "services.conversation_worker.main"]
    environment:
      <<: *agent-env
      CONVERSATION_GROUP: conversation-worker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

  tool-executor:
    <<: *agent-service
    container_name: soma_tool_executor
    command: ["python3", "-m", "services.tool_executor.main"]
    environment:
      <<: *agent-env
      TOOL_EXECUTOR_GROUP: tool-executor
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

  agent-ui:
    <<: *agent-service
    container_name: soma_agent_ui
    command: ["python3", "/a0/run_ui.py", "--dockerized=true", "--host", "0.0.0.0", "--port", "80"]
    environment:
      <<: *agent-env
      SOMA_BASE_URL: http://gateway:8010
    depends_on:
      gateway:
        condition: service_started
    ports:
      - "7002:80"

volumes:
  postgres_data:
  kafka_data:

networks:
  default:
    name: soma_minimal