# Production-lean, smaller image compose

# Production-lean, smaller image compose

x-agent-env: &agent-env
	PYTHONPATH: /git/agent-zero
	LOG_LEVEL: INFO
	KAFKA_BOOTSTRAP_SERVERS: kafka:9092
	REDIS_URL: redis://redis:6379/0
	POSTGRES_DSN: postgresql://soma:soma@postgres:5432/somaagent01
	POLICY_BASE_URL: http://opa:8181
	POLICY_DATA_PATH: /v1/data/soma/allow
	POLICY_FAIL_OPEN: "false"
	OPA_URL: http://opa:8181
	CONVERSATION_INBOUND: conversation.inbound
	CONVERSATION_OUTBOUND: conversation.outbound
	CONVERSATION_GROUP: conversation-worker
	TOOL_REQUESTS_TOPIC: tool.requests
	TOOL_RESULTS_TOPIC: tool.results
	TOOL_EXECUTOR_GROUP: tool-executor
	MEMORY_SERVICE_TARGET: memory-service:20017
	SOMA_AGENT_MODE: LOCAL
	SOMA_BASE_URL: http://host.docker.internal:9696
	SOMA_CONTAINER_HOST_ALIAS: host.docker.internal
	SOMA_ENABLED: "true"
	SKM_BASE_URL: http://host.docker.internal:9696
	GATEWAY_JWT_SECRET: ${GATEWAY_JWT_SECRET:-changeme}

x-agent-service: &agent-service
	image: somaagent01-slim:latest
	working_dir: /git/agent-zero
	environment:
		<<: *agent-env
	volumes:
		- ./memory:/git/agent-zero/memory
		- ./logs:/git/agent-zero/logs
		- ./knowledge:/git/agent-zero/knowledge:ro
		- ./instruments:/git/agent-zero/instruments:ro
		- ./tmp:/git/agent-zero/tmp
		- ./prompts:/git/agent-zero/prompts:ro
	extra_hosts:
		- "host.docker.internal:host-gateway"
	depends_on:
		kafka:
			condition: service_healthy
		postgres:
			condition: service_healthy
		redis:
			condition: service_healthy
		opa:
			condition: service_started
	restart: unless-stopped

services:
	kafka:
		image: bitnami/kafka:latest
		container_name: somaAgent01_kafka
		profiles: ["core"]
		environment:
			KAFKA_CFG_NODE_ID: "0"
			KAFKA_CFG_PROCESS_ROLES: "broker,controller"
			KAFKA_CFG_LISTENERS: "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093"
			KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
			KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
			KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "0@kafka:9093"
			KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
			KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
			KAFKA_CFG_NUM_PARTITIONS: "3"
			KAFKA_ENABLE_KRAFT: "yes"
			KAFKA_CFG_KRAFT_CLUSTER_ID: "soma-cluster-01"
		ports:
			- "${KAFKA_PORT:-21000}:9092"
		restart: unless-stopped
		volumes:
			- kafka_data:/bitnami/kafka
		healthcheck:
			test: ["CMD", "true"]
			interval: 30s
			timeout: 10s
			retries: 5
			start_period: 300s

	redis:
		image: redis:7-alpine
		container_name: somaAgent01_redis
		profiles: ["core"]
		command: ["redis-server", "--save", "60", "1", "--appendonly", "yes", "--appendfsync", "everysec"]
		ports:
			- "${REDIS_PORT:-21001}:6379"
		restart: unless-stopped
		volumes:
			- redis_data:/data
		healthcheck:
			test: ["CMD", "redis-cli", "ping"]
			interval: 30s
			timeout: 5s
			retries: 5

	postgres:
		image: postgres:16-alpine
		container_name: somaAgent01_postgres
		profiles: ["core"]
		environment:
			POSTGRES_USER: soma
			POSTGRES_PASSWORD: soma
			POSTGRES_DB: somaagent01
			PGDATA: /var/lib/postgresql/data/pgdata
		ports:
			- "${POSTGRES_PORT:-21002}:5432"
		restart: unless-stopped
		volumes:
			- postgres_data:/var/lib/postgresql/data
		healthcheck:
			test: ["CMD-SHELL", "pg_isready -U soma -d somaagent01"]
			interval: 15s
			timeout: 5s
			retries: 5
			start_period: 40s

	opa:
		image: openpolicyagent/opa:0.64.0
		container_name: somaAgent01_opa
		profiles: ["core"]
		command: ["run", "--server", "--set=decision_logs.console=true"]
		ports:
			- "${OPA_PORT:-21009}:8181"
		restart: unless-stopped

	kafka-init:
		image: bitnami/kafka:latest
		container_name: somaAgent01_kafka_init
		profiles: ["dev"]
		depends_on:
			kafka:
				condition: service_healthy
		entrypoint: ["bash", "-lc"]
		command: bash /init/init-topics.sh
		environment:
			- KAFKA_BOOTSTRAP_SERVERS=kafka:9092
		volumes:
			- ./infra/kafka/init-topics.sh:/init/init-topics.sh:ro
		restart: "no"

	conversation-worker:
		<<: *agent-service
		container_name: somaAgent01_conversation-worker
		profiles: ["dev"]
		depends_on:
			kafka-init:
				condition: service_completed_successfully
		command:
			- python3
			- -m
			- services.conversation_worker.main

	tool-executor:
		<<: *agent-service
		container_name: somaAgent01_tool-executor
		profiles: ["dev"]
		depends_on:
			kafka-init:
				condition: service_completed_successfully
		command:
			- python3
			- -m
			- services.tool_executor.main

	memory-service:
		<<: *agent-service
		container_name: somaAgent01_memory-service
		profiles: ["dev"]
		environment:
			<<: *agent-env
			MEMORY_SERVICE_PORT: "${MEMORY_SERVICE_PORT:-21017}"
		command:
			- python3
			- -m
			- services.memory_service.main
		ports:
			- "${MEMORY_SERVICE_PORT:-21017}:${MEMORY_SERVICE_PORT:-21017}"

	agent-ui:
		<<: *agent-service
		container_name: somaAgent01_agent-ui
		profiles: ["dev"]
		command:
			- python3
			- run_ui.py
			- --dockerized=true
			- --host=0.0.0.0
			- --port=80
		ports:
			- "${AGENT_UI_PORT:-21015}:80"

	gateway:
		<<: *agent-service
		container_name: somaAgent01_gateway
		profiles: ["dev"]
		depends_on:
			kafka-init:
				condition: service_completed_successfully
		command:
			- python3
			- -m
			- uvicorn
			- services.gateway.main:app
			- --host
			- 0.0.0.0
			- --port
			- "8010"
		environment:
			<<: *agent-env
			PORT: "8010"
			GATEWAY_REQUIRE_AUTH: ${GATEWAY_REQUIRE_AUTH:-true}
		ports:
			- "${GATEWAY_PORT:-21016}:8010"

networks:
	default:
		external: true
		name: somaagent01

volumes:
	kafka_data:
	redis_data:
	postgres_data:
