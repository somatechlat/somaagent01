{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SomaAgent01 Documentation Hub","text":"<p>Welcome to the reorganized documentation hub. Content now lives in four curated manuals with shared resources for terminology, style, and change tracking.</p>"},{"location":"#manuals","title":"Manuals","text":"<ul> <li>User Manual: Install SomaAgent01, run daily workflows, and troubleshoot issues.</li> <li>Technical Manual: Dive into architecture, infrastructure, integrations, and data flow.</li> <li>Development Manual: Follow engineering workflows, coding standards, testing, and release processes.</li> <li>Onboarding Manual: Enable new team members with orientation checklists, tool primers, and 30/60/90 planning.</li> </ul>"},{"location":"#shared-resources","title":"Shared Resources","text":"<ul> <li>Documentation Style Guide to keep writing consistent.</li> <li>Documentation Audit Checklist enforced on every docs PR.</li> <li>Glossary with canonical terminology.</li> <li>Documentation Change Log recording updates across manuals.</li> </ul>"},{"location":"#automation-governance","title":"Automation &amp; Governance","text":"<ul> <li>Run <code>make docs-verify</code> locally to execute markdown lint, link checks, diagram rendering, and MkDocs build.</li> <li>Docs GitHub Action (<code>.github/workflows/docs-quality.yml</code>) enforces the same checks in CI.</li> <li>Quarterly audits follow the checklist to ensure accuracy, accessibility, and ownership.</li> </ul> <p>[!TIP] Legacy documents are being migrated into the new manuals. Check <code>_legacy/</code> or the change log for interim locations while the transition completes.</p>"},{"location":"changelog/","title":"Documentation Change Log","text":"<p>Record every meaningful documentation change here. Include links to PRs and affected manuals.</p> Date Version Change Manuals PR 2025-10-15 1.0.0 Reorganized documentation into four-manual structure; added automation references User, Technical, Development, Onboarding pending PR"},{"location":"documentation-audit-checklist/","title":"Documentation Audit Checklist","text":"<p>Complete this checklist for every documentation change. Attach the filled checklist to PR descriptions.</p> <ol> <li>Purpose stated: Page explains why it exists and what problem it solves.</li> <li>Audience defined: Target readers identified in front matter.</li> <li>Prerequisites listed: Requirements documented before steps begin.</li> <li>Step-by-step instructions: Procedures are ordered, actionable, and numbered where appropriate.</li> <li>Verification criteria: Explicit checks confirm success at the end of each procedure.</li> <li>Common errors: Troubleshooting tips or references provided for known failure modes.</li> <li>References &amp; links: Related documents linked using relative paths; links validated.</li> <li>Version &amp; metadata: <code>version</code>, <code>last-reviewed</code>, <code>owner</code>, <code>reviewers</code> updated in front matter.</li> <li>Accessibility: Tables, images, and diagrams include alt text or captions; tone inclusive.</li> <li>Automation hooks: <code>make docs-verify</code> (markdownlint, link checker, MkDocs) executed locally; CI workflow passes.</li> <li>Diagrams rendered: Mermaid or diagram sources committed; render step succeeds.</li> <li>Change logged: Entry added to <code>docs/changelog.md</code> with summary and PR link.</li> </ol>"},{"location":"glossary/","title":"SomaAgent01 Glossary","text":"Term Definition SomaAgent01 (SA01) Core conversational agent service responsible for orchestrating tool use and generating responses. SomaBrain (SB) Memory service storing long-term context and semantic embeddings. SomaAgentHub (SAH) Web experience layer and API gateway. SomaFractalMemory (SMF) Vector search component, typically backed by Qdrant or pgvector. SLM Soma Language Model, managed hosted LLM endpoint for chat/utility/embedding roles. Tool Executor Service executing sandboxed code and system commands on behalf of agents. OPA Open Policy Agent enforcing authorization decisions. Vault Secret management service that injects credentials into pods. Runbook Step-by-step operational guide for a repeatable task or incident. Documentation Audit Quarterly review ensuring accuracy, completeness, and compliance with the documentation checklist."},{"location":"style-guide/","title":"Documentation Style Guide","text":"<p>Use this guide to keep SomaAgent01 documentation consistent across manuals.</p>"},{"location":"style-guide/#structure","title":"Structure","text":"<ul> <li>Manuals live under <code>docs/&lt;manual-name&gt;/</code> using kebab-case directories.</li> <li>Each page begins with YAML front matter declaring <code>title</code>, <code>version</code>, <code>last-reviewed</code>, <code>audience</code>, <code>owner</code>, <code>reviewers</code>, <code>prerequisites</code>, and <code>verification</code> when applicable.</li> <li>Use sentence case for headings (<code>## Install dependencies</code>).</li> </ul>"},{"location":"style-guide/#voice-tone","title":"Voice &amp; Tone","text":"<ul> <li>Direct, action-oriented instructions.</li> <li>Highlight decisions with callouts (<code>&gt; [!TIP]</code>, <code>&gt; [!NOTE]</code>).</li> <li>Avoid marketing language; focus on actionable guidance.</li> </ul>"},{"location":"style-guide/#formatting","title":"Formatting","text":"<ul> <li>Wrap file paths and commands in backticks.</li> <li>Use fenced code blocks with language hints (<code>```bash</code>).</li> <li>Tables require header separators and concise columns.</li> <li>Diagrams authored in Mermaid; store sources in <code>docs/diagrams/</code>.</li> </ul>"},{"location":"style-guide/#links-references","title":"Links &amp; References","text":"<ul> <li>Prefer relative links (<code>../technical-manual/architecture.md</code>).</li> <li>Update links when relocating content; run link checker before merging.</li> <li>Reference change log entries when updating procedures.</li> </ul>"},{"location":"style-guide/#media","title":"Media","text":"<ul> <li>Store images under <code>docs/res/&lt;manual&gt;/&lt;topic&gt;/</code>.</li> <li>Provide alt text and captions.</li> <li>Optimize images for web (&lt;500 KB) before committing.</li> </ul>"},{"location":"style-guide/#metadata","title":"Metadata","text":"<ul> <li>Update <code>last-reviewed</code> on every substantive change.</li> <li>Add reviewers who approved the content.</li> <li>State verification criteria so readers can confirm success.</li> </ul>"},{"location":"style-guide/#checklist","title":"Checklist","text":"<p>See <code>docs/documentation-audit-checklist.md</code> before submitting PRs.</p>"},{"location":"data/streams/","title":"Event Streams &amp; Data Contracts","text":"<p>Note: This page is referenced from the Technical Manual. Default topic names reflect the current code; environment variables can override them.</p> <p>SomaAgent01 relies on Kafka to decouple orchestration from long-running work. This document enumerates topics, payloads, and retention policy.</p>"},{"location":"data/streams/#topic-catalog","title":"Topic Catalog","text":"<p>Default topics in code (configurable via env):</p> Topic Producer Consumer Retention Payload Schema <code>tool.requests</code> Gateway/Orchestrator Tool Executor 7 days <code>ToolInvocation</code> <code>tool.results</code> Tool Executor Gateway/Orchestrator 7 days <code>ToolResult</code> <code>conversation.inbound</code> Gateway Conversation workers 3 days <code>ConversationEvent</code> <code>conversation.outbound</code> Conversation workers Gateway/UI 3 days <code>ConversationEvent</code> <code>config_updates</code> Config publisher Gateway 1 day <code>SettingsPayload</code> <p>Environment overrides:</p> <ul> <li>TOOL_REQUESTS_TOPIC, TOOL_RESULTS_TOPIC, TOOL_EXECUTOR_GROUP</li> <li>KAFKA_BOOTSTRAP_SERVERS and security-related vars</li> </ul>"},{"location":"data/streams/#payload-schemas","title":"Payload Schemas","text":""},{"location":"data/streams/#toolinvocation","title":"ToolInvocation","text":"<pre><code>{\n  \"task_id\": \"uuid\",\n  \"tenant_id\": \"default\",\n  \"persona\": \"agent0\",\n  \"tool_name\": \"shell\",\n  \"payload\": {\"command\": \"ls\"},\n  \"metadata\": {\"requested_by\": \"gateway\", \"timestamp\": \"2025-10-09T16:59:00Z\"}\n}\n</code></pre>"},{"location":"data/streams/#toolresult","title":"ToolResult","text":"<pre><code>{\n  \"task_id\": \"uuid\",\n  \"status\": \"success\",\n  \"output\": {\"stdout\": \"...\", \"stderr\": \"\"},\n  \"metrics\": {\"duration_ms\": 4500},\n  \"metadata\": {\"tenant_id\": \"default\", \"correlation_id\": \"conversation-uuid\"}\n}\n</code></pre>"},{"location":"data/streams/#delegatedtask","title":"DelegatedTask","text":"<pre><code>{\n  \"task_id\": \"uuid\",\n  \"type\": \"schedule:run\",\n  \"payload\": {\"cron\": \"0 9 * * *\", \"job\": \"daily_report\"},\n  \"tenant_id\": \"default\",\n  \"priority\": 5\n}\n</code></pre>"},{"location":"data/streams/#partitioning-strategy","title":"Partitioning Strategy","text":"<ul> <li>Partition key: <code>tenant_id</code> to guarantee ordering per tenant.</li> <li>Default partitions: 3 (scale via <code>scripts/kafka_partition_scaler.py</code>).</li> </ul>"},{"location":"data/streams/#producers-consumers","title":"Producers &amp; Consumers","text":"<pre><code>graph LR\n  Gateway --&gt;|conversation.inbound| Kafka\n  Kafka --&gt;|conversation.inbound| ConversationWorker\n  ConversationWorker --&gt;|conversation.outbound| Kafka\n  Kafka --&gt;|conversation.outbound| Gateway\n  Gateway --&gt;|tool.requests| Kafka\n  Kafka --&gt;|tool.requests| ToolExecutor\n  ToolExecutor --&gt;|tool.results| Kafka\n  Kafka --&gt;|tool.results| Gateway\n</code></pre>"},{"location":"data/streams/#retention-compaction","title":"Retention &amp; Compaction","text":"<ul> <li>All topics use delete-based retention; adjust via <code>KAFKA_CFG_LOG_RETENTION_HOURS</code>.</li> <li>For audit trails consider enabling log compaction with key = <code>task_id</code>.</li> </ul>"},{"location":"data/streams/#monitoring","title":"Monitoring","text":"<ul> <li>Prometheus JMX exporter exposes metrics (topic lag, ISR count).</li> <li>Alert thresholds: lag &gt; 500 for <code>somastack.tools</code>, offline partitions &gt; 0.</li> </ul>"},{"location":"data/streams/#local-development-tips","title":"Local Development Tips","text":"<ul> <li>Use <code>kafkacat</code> or <code>kcat</code> to inspect topics: <code>kcat -b localhost:29092 -t somastack.tools -C</code>.</li> <li>If you reset volumes via <code>make dev-clean</code>, recreate topics automatically on boot.</li> </ul>"},{"location":"data/streams/#data-governance","title":"Data Governance","text":"<ul> <li>Sensitive payloads should avoid PII; if unavoidable, encrypt payload fields before publishing.</li> <li>Record schema versions within payload (<code>metadata.schema_version</code>).</li> </ul>"},{"location":"development-manual/","title":"Development Manual","text":"<p>This manual is the canonical source for building, testing, and shipping SomaAgent01. It prescribes environment setup, coding standards, branching strategy, and verification requirements.</p>"},{"location":"development-manual/#chapters","title":"Chapters","text":"<ul> <li>Environment Setup</li> <li>Contribution Workflow</li> <li>Coding Standards</li> <li>Testing Strategy</li> <li>Debugging Guide</li> <li>Release Process</li> <li>Developer Tooling</li> <li>Runbooks</li> </ul> <p>Refer to the Technical Manual for system architecture and to the Onboarding Manual for role-specific pathways.</p>"},{"location":"development-manual/api-reference/","title":"API Reference","text":"<p>Base URL</p> <ul> <li>Container network: http://localhost:8010 (service listens on 8010)</li> <li>Host (dev compose): http://localhost:${GATEWAY_PORT:-20016}</li> </ul> <p>Tip: Use Makefile helpers to manage the dev stack (wrapping <code>docker-compose.yaml</code>):</p> <ul> <li>make dev-up \u2014 start the core + dev profiles</li> <li>make dev-rebuild \u2014 rebuild and restart</li> <li>make dev-logs \u2014 tail logs</li> <li>make dev-up-services SERVICES=\"conversation-worker tool-executor\" \u2014 start specific services</li> <li>Override the exposed gateway port as needed: make dev-up GATEWAY_PORT=20050</li> </ul> <p>Tip: If you changed <code>GATEWAY_PORT</code>, substitute your host port in the examples below.</p> <p>Authentication</p> <ul> <li>JWT Bearer tokens when GATEWAY_REQUIRE_AUTH=true or JWT config is set. Otherwise optional in local dev.</li> <li>Header: Authorization: Bearer  <p>SSO/JWT Setup (quick)</p> <ul> <li>HS256: set <code>GATEWAY_REQUIRE_AUTH=true</code>, <code>GATEWAY_JWT_SECRET=dev-secret</code>, <code>GATEWAY_JWT_ALGORITHMS=HS256</code>.</li> <li>JWKS: set <code>GATEWAY_JWKS_URL=https://YOUR_DOMAIN/.well-known/jwks.json</code>, <code>GATEWAY_JWT_ALGORITHMS=RS256</code>, optionally <code>GATEWAY_JWT_AUDIENCE</code> and <code>GATEWAY_JWT_ISSUER</code>.</li> <li>Admin API requires <code>scope</code> to include <code>admin</code> or <code>keys:manage</code>.</li> </ul> <p>Gateway Endpoints (FastAPI)</p> <ul> <li>POST /v1/session/message</li> <li>Body: { session_id?, persona_id?, message, attachments: string[], metadata: object }</li> <li>Returns: { session_id, event_id }</li> <li> <p>Publishes to topic conversation.inbound</p> </li> <li> <p>POST /v1/session/action</p> </li> <li>Body: { session_id?, persona_id?, action, metadata? }</li> <li> <p>Returns: { session_id, event_id }</p> </li> <li> <p>GET /v1/session/{session_id}/events (SSE)</p> </li> <li> <p>Stream of conversation.outbound events for session</p> </li> <li> <p>WS /v1/session/{session_id}/stream</p> </li> <li> <p>WebSocket JSON stream of conversation.outbound events</p> </li> <li> <p>GET /v1/health</p> </li> <li> <p>Returns component status for postgres, redis, kafka, and optional HTTP dependencies</p> </li> <li> <p>API Keys</p> </li> <li>POST /v1/keys -&gt; create { key_id, label, secret, prefix, ... }</li> <li>GET /v1/keys -&gt; list keys (admin scope required)</li> <li> <p>DELETE /v1/keys/{key_id} -&gt; revoke (admin scope required)</p> </li> <li> <p>Model Profiles</p> </li> <li>GET /v1/model-profiles</li> <li>POST /v1/model-profiles (201)</li> <li>PUT /v1/model-profiles/{role}/{deployment_mode}</li> <li> <p>DELETE /v1/model-profiles/{role}/{deployment_mode}</p> </li> <li> <p>Routing</p> </li> <li> <p>POST /v1/route -&gt; { chosen, score? }</p> </li> <li> <p>Requeue</p> </li> <li>GET /v1/requeue -&gt; list pending items</li> <li>POST /v1/requeue/{requeue_id}/resolve?publish=true -&gt; { status }</li> <li> <p>DELETE /v1/requeue/{requeue_id} -&gt; { status }</p> </li> <li> <p>Capsules proxy</p> </li> <li>GET /v1/capsules</li> <li>GET /v1/capsules/{capsule_id}</li> <li>POST /v1/capsules/{capsule_id}/install</li> </ul> <p>Notes</p> <ul> <li>Legacy endpoints like /chat, /settings_get, /settings_set, /realtime_session do not exist on the FastAPI gateway.</li> <li>Realtime session brokering and connectivity utilities live in the legacy python/api layer (see Legacy APIs below).</li> </ul> <p>Event Streams</p> <ul> <li>conversation.inbound: user messages enqueued by gateway</li> <li>conversation.outbound: responses/events consumed by SSE/WS</li> <li>tool.requests: tool executor input</li> <li>tool.results: tool executor output</li> </ul> <p>Legacy APIs (python/api/*)</p> <ul> <li>POST /api_message</li> <li>GET|POST /api_log_get</li> <li>POST /api_terminate_chat</li> <li>POST /api_reset_chat</li> <li>POST /api_files_get</li> <li>POST /realtime_session</li> </ul> <p>These are maintained for backward compatibility and are not part of the new /v1 gateway surface.</p>"},{"location":"development-manual/ci-cd/","title":"CI/CD Pipeline","text":"<p>This project ships a mode-aware GitHub Actions workflow that builds, scans, and deploys the runtime services via Helm overlays.</p>"},{"location":"development-manual/ci-cd/#modes","title":"Modes","text":"<ul> <li>dev_full: Local-like defaults, single replicas, lightweight resources.</li> <li>dev_prod: Production-like configuration but reduced scale.</li> <li>prod: Production configuration and scaling assumptions.</li> <li>prod_ha: High-availability overlays for production.</li> </ul> <p>The helper script generates a unified environment file consumed across tools: - <code>scripts/generate-global-env.sh &lt;mode&gt; /root/soma-global.env</code></p>"},{"location":"development-manual/ci-cd/#workflows","title":"Workflows","text":"<p>Key CI workflows in <code>.github/workflows/</code>:</p> <ul> <li><code>ci.yml</code>: Lints Python and Helm, runs unit tests.</li> <li><code>ci-kind.yml</code>: Spins up a KinD cluster and validates infra chart basics.</li> <li><code>docs.yml</code> and <code>docs-quality.yml</code>: Builds documentation (MkDocs) and performs docs checks.</li> <li><code>security.yml</code>: Security scans (e.g., dependency checks or image scanning, if configured).</li> </ul> <p>Typical deployment flow (generic, environment-agnostic): - Build docs with git plugins disabled by default. - Build and push container images to your registry. - Helm lint charts (outbox-sync and the umbrella soma-stack). - Select overlay by mode and deploy with <code>helm upgrade --install</code>. - Wait for rollout, then run Helm tests (<code>helm test &lt;release&gt;</code>). - On failure, rollback to previous Helm revision.</p>"},{"location":"development-manual/ci-cd/#canary-deployments-gateway","title":"Canary deployments (gateway)","text":"<p>The workflow supports an optional canary for the gateway using nginx ingress canary annotations.</p> <p>Inputs (workflow_dispatch): - <code>canaryEnabled</code>: true/false (default: false) - <code>canaryWeight</code>: percentage 0-100 (default: 10) - <code>canaryImageTag</code>: image tag for the canary (defaults to the built tag) - <code>stableImageTag</code>: optional; if provided, the stable deployment keeps this tag while canary uses <code>canaryImageTag</code>.</p> <p>Chart values (umbrella <code>soma-stack</code>): - <code>services.gateway.canary.enabled</code> - <code>services.gateway.canary.weight</code> - <code>services.gateway.canary.imageTag</code></p> <p>Requirements: - nginx ingress controller for canary annotations to take effect. - <code>services.gateway.ingress.enabled: true</code> with appropriate host/class.</p>"},{"location":"development-manual/ci-cd/#overlays","title":"Overlays","text":"<p>The umbrella chart supports overlays in <code>infra/helm/overlays/</code>: - dev-values.yaml - prod-values.yaml - prod-ha-values.yaml</p> <p>These are merged with <code>infra/helm/soma-stack/values.yaml</code> during deployment.</p>"},{"location":"development-manual/ci-cd/#progressive-canary-rollout","title":"Progressive canary rollout","text":"<p>File: <code>.github/workflows/canary-progressive.yml</code></p> <p>Purpose: Safely shift traffic to the gateway canary either via nginx ingress canary annotations or Istio VirtualService weights, validating at each step with Helm tests.</p> <p>Inputs (workflow_dispatch): - <code>environment</code>: dev | prod | prod-ha (selects overlay values file) - <code>target</code>: nginx | istio (canary mechanism) - <code>releaseName</code>: Helm release (default: soma) - <code>namespace</code>: Kubernetes namespace (default: default) - <code>chartPath</code>: Path to umbrella chart (default: infra/helm/soma-stack) - <code>canaryImageTag</code>: Optional canary image tag override</p> <p>Requirements: - Cluster access with <code>KUBE_CONFIG_B64</code> secret configured in repository secrets (base64-encoded kubeconfig). - For nginx: <code>services.gateway.ingress.enabled: true</code> and nginx ingress controller installed. - For Istio: <code>global.ISTIO_ENABLED: true</code>, <code>services.gateway.istio.enabled: true</code>, and a reachable <code>services.gateway.istio.host</code> via configured <code>gateways</code>.</p> <p>Flow: 1) Ensures canary is enabled and starts at 5% traffic. 2) Progresses through 10% \u2192 25% \u2192 50% \u2192 75% \u2192 100%. 3) After each shift, runs Helm tests; on failure, rolls back to 0% canary (or 100% stable for Istio) and exits.</p>"},{"location":"development-manual/ci-cd/#services","title":"Services","text":"<p>Umbrella chart <code>infra/helm/soma-stack</code> deploys: - gateway (FastAPI, HTTP) - conversation-worker (metrics exposed) - tool-executor (metrics exposed) - delegation-gateway (FastAPI, HTTP) - delegation-worker - memory-service (gRPC) - ui (static FastAPI server) - outbox-sync (as a dependency chart)</p>"},{"location":"development-manual/ci-cd/#metrics","title":"Metrics","text":"<ul> <li>Scraped directly via Services (metrics ports) or, if Prometheus Operator is present, enable <code>global.PROM_OPERATOR_ENABLED=true</code> to render ServiceMonitors.</li> </ul>"},{"location":"development-manual/ci-cd/#rollback","title":"Rollback","text":"<ul> <li>The workflow attempts <code>helm rollback</code> automatically on failure.</li> <li>You can also roll back manually via the Helm history and rollback commands.</li> </ul>"},{"location":"development-manual/coding-standards/","title":"Coding Standards","text":"<p>title: Coding Standards slug: dev-coding-standards version: 1.0.0 last-reviewed: 2025-10-15 audience: contributors owner: developer-experience reviewers:   - platform-engineering prerequisites:   - Read Contribution Workflow verification:   - <code>make lint</code> and <code>mypy</code> succeed   - Code review checklist complete</p>"},{"location":"development-manual/coding-standards/#coding-standards","title":"Coding Standards","text":"<p>These standards ensure SomaAgent01 code remains consistent, testable, and secure. The automation pipeline enforces many of these rules via <code>ruff</code>, <code>black</code>, and <code>mypy</code>.</p>"},{"location":"development-manual/coding-standards/#python","title":"Python","text":"<ul> <li>Format with <code>black</code> and lint using <code>ruff</code>. Run <code>make fmt &amp;&amp; make lint</code> before pushing.</li> <li>Use type hints everywhere; CI blocks PRs failing <code>mypy</code>.</li> <li>Prefer dataclasses or Pydantic models for structured payloads.</li> <li>Avoid global state; inject dependencies via FastAPI or dedicated factories.</li> <li>Log with structured contexts (<code>logger.info(\"message\", extra={\"task_id\": task_id})</code>).</li> <li>Never use <code>except:</code>; catch specific exceptions to satisfy <code>ruff</code> rule <code>E722</code>.</li> <li>Capture loop variables when defining closures (<code>def fn(_, printer=printer)</code> to avoid <code>ruff</code> rule <code>B023</code>).</li> </ul>"},{"location":"development-manual/coding-standards/#javascript-typescript-web-ui","title":"JavaScript / TypeScript (Web UI)","text":"<ul> <li>Target ES2020 modules. Use <code>const</code>/<code>let</code>; avoid <code>var</code>.</li> <li>Keep functions pure when possible; isolate DOM manipulation.</li> <li>Document complex flows with JSDoc or inline comments.</li> <li>Run <code>npm run lint</code> and <code>npm run test</code> before pushing UI changes.</li> </ul>"},{"location":"development-manual/coding-standards/#testing","title":"Testing","text":"<ul> <li>Use Pytest for backend; Playwright for UI flows.</li> <li>Every feature requires tests covering happy path and failure modes.</li> <li>Prefer integration tests over heavy mocking\u2014aligns with Agent Zero's philosophy.</li> <li>Store reusable fixtures in <code>tests/fixtures/</code>.</li> </ul>"},{"location":"development-manual/coding-standards/#documentation","title":"Documentation","text":"<ul> <li>Update relevant manuals (User, Technical, Development, Onboarding) for every feature.</li> <li>Maintain diagrams in Mermaid with source tracked under <code>docs/diagrams/</code>.</li> <li>Place screenshots under <code>docs/res/</code> with descriptive filenames.</li> <li>Run <code>make docs-verify</code> to lint Markdown, validate links, and build MkDocs.</li> </ul>"},{"location":"development-manual/coding-standards/#git-hygiene","title":"Git Hygiene","text":"<ul> <li>Branch names follow <code>feature/&lt;id&gt;-&lt;slug&gt;</code> or <code>bugfix/&lt;id&gt;-&lt;slug&gt;</code>.</li> <li>Commit messages use imperative mood (<code>Add realtime speech docs</code>).</li> <li>Include tests and documentation updates in the same PR when feasible.</li> </ul>"},{"location":"development-manual/coding-standards/#security","title":"Security","text":"<ul> <li>Never hardcode secrets. Use <code>python/helpers/secrets.py</code> or environment variables.</li> <li>Validate all API inputs and sanitize logs.</li> <li>Run Trivy scans locally for critical services when touching Dockerfiles.</li> </ul>"},{"location":"development-manual/coding-standards/#code-reviews","title":"Code Reviews","text":"<ul> <li>PR description must include context, screenshots (if UI), and test evidence.</li> <li>Reviewers focus on correctness, performance, security, and documentation coverage.</li> <li>Resolve comments via follow-up commits; squash at merge time.</li> </ul>"},{"location":"development-manual/contribution-workflow/","title":"Contribution Workflow","text":"<p>This workflow defines how to propose, implement, and merge changes into SomaAgent01. It supplements the repository <code>CONTRIBUTING</code> guidelines with enforceable steps and automation gates.</p>"},{"location":"development-manual/contribution-workflow/#1-branching-model","title":"1. Branching Model","text":"<ul> <li>Default branch: <code>main</code>.</li> <li>Integration branch: <code>soma_integration</code>.</li> <li>Feature branches: <code>feature/&lt;issue-id&gt;-&lt;short-description&gt;</code>.</li> <li>Bugfix branches: <code>bugfix/&lt;issue-id&gt;-&lt;short-description&gt;</code>.</li> </ul>"},{"location":"development-manual/contribution-workflow/#2-preparing-a-change","title":"2. Preparing a Change","text":"<ol> <li>Open or reference an issue in GitHub.</li> <li>Create a feature branch from <code>soma_integration</code>.</li> <li>Implement changes with frequent commits. Use conventional message prefixes (<code>feat:</code>, <code>fix:</code>, <code>docs:</code>, <code>chore:</code>).</li> <li>Update or add tests alongside code.</li> <li>Update documentation using the manual structure (User, Technical, Development, Onboarding) and run the documentation checklist (see <code>docs/documentation-audit-checklist.md</code>).</li> </ol>"},{"location":"development-manual/contribution-workflow/#3-local-verification","title":"3. Local Verification","text":"<pre><code>make fmt-check\nmake lint\npytest\nnpm test --prefix webui\nmake docs-verify\n</code></pre> <p>[!TIP] <code>make docs-verify</code> runs markdown linting, link checking, and MkDocs build. Configure details in <code>Makefile</code> under the <code>docs</code> namespace.</p>"},{"location":"development-manual/contribution-workflow/#4-pull-request-requirements","title":"4. Pull Request Requirements","text":"<ul> <li>Target branch: <code>soma_integration</code>.</li> <li>Labels: add <code>docs-only</code> if code unchanged, otherwise use component labels (<code>backend</code>, <code>frontend</code>, <code>infra</code>).</li> <li>Reviewers: assign at least one maintainer from each impacted area (backend, frontend, infra, docs).</li> <li>Checklist:</li> <li>[ ] Tests added/updated.</li> <li>[ ] Documentation updated.</li> <li>[ ] Change logged in <code>docs/changelog.md</code>.</li> <li>[ ] CI green (includes docs workflow).</li> </ul>"},{"location":"development-manual/contribution-workflow/#5-review-process","title":"5. Review Process","text":"<ul> <li>Automated checks (lint, tests, docs) must pass before human review.</li> <li>Reviewers focus on correctness, security, performance, and documentation coverage.</li> <li>Address feedback via follow-up commits (avoid force-push unless squashing at the end).</li> </ul>"},{"location":"development-manual/contribution-workflow/#6-merge-strategy","title":"6. Merge Strategy","text":"<ul> <li>Use Squash &amp; Merge for feature work.</li> <li>Use Rebase &amp; Merge for large refactors coordinated with release managers.</li> <li>Post-merge: delete branch, ensure issue is closed or moved to <code>Done</code>.</li> </ul>"},{"location":"development-manual/contribution-workflow/#7-release-notes","title":"7. Release Notes","text":"<ul> <li>Every merged PR updates <code>docs/changelog.md</code> with a short description and links to affected manuals.</li> <li>Major features annotate the Onboarding Manual if user workflows change.</li> </ul>"},{"location":"development-manual/contribution-workflow/#8-compliance","title":"8. Compliance","text":"<ul> <li>CLA enforcement automated via GitHub Action.</li> <li>Security-sensitive changes require approval from security engineering.</li> <li>Follow SOC2 control mapping documented in the Security Manual.</li> </ul>"},{"location":"development-manual/debugging/","title":"Debugging Guide","text":"<p>Practical steps for diagnosing SomaAgent01 issues across services.</p>"},{"location":"development-manual/debugging/#logging-shortcuts","title":"Logging Shortcuts","text":"Service Command Gateway <code>docker compose -p somaagent01 -f docker-compose.yaml logs -f gateway</code> Tool Executor <code>docker compose -p somaagent01 -f docker-compose.yaml logs -f tool-executor</code> Conversation Worker <code>docker compose -p somaagent01 -f docker-compose.yaml logs -f conversation-worker</code> UI Browser DevTools console (<code>speech-store</code> namespace for realtime)"},{"location":"development-manual/debugging/#common-scenarios","title":"Common Scenarios","text":"Symptom Diagnosis Fix 500 on <code>/chat</code> Gateway logs, Redis/Postgres reachability Restart dependency, verify env vars Missing memories Inspect Postgres <code>memory_items</code>, Redis cache Re-run memory save, confirm tenant/persona IDs Realtime speech silent Browser console + network tab Validate <code>/realtime_session</code> response, unlock audio playback Kafka lag growing Check consumer offsets, worker logs Scale executors, resolve failing tasks"},{"location":"development-manual/debugging/#breakpoints","title":"Breakpoints","text":"<ul> <li>Python: Attach VS Code debugger via <code>python -m services.gateway.main</code> or remote attach to container.</li> <li>UI: Use Chrome DevTools; set breakpoints in <code>webui/components/chat/*</code>.</li> </ul>"},{"location":"development-manual/debugging/#profiling-tools","title":"Profiling Tools","text":"<ul> <li>Python CPU hotspots: <code>py-spy top --pid &lt;PID&gt;</code> or <code>yappi</code> snapshots.</li> <li>Browser rendering: Chrome Performance tab.</li> </ul>"},{"location":"development-manual/debugging/#feature-flags-toggles","title":"Feature Flags &amp; Toggles","text":"<ul> <li>Runtime managed through <code>python/helpers/settings.py</code> and <code>/settings_set</code> API.</li> <li>Inspect effective configuration via <code>/settings_get</code> or logs emitted at startup.</li> </ul>"},{"location":"development-manual/debugging/#remote-debugging","title":"Remote Debugging","text":"<ul> <li>Shell access: <code>docker exec -it somaAgent01_gateway /bin/bash</code>.</li> <li>Remote debugger: configure <code>debugpy</code> in <code>.vscode/launch.json</code>, forward port from container.</li> </ul>"},{"location":"development-manual/debugging/#reproduce-issues-reliably","title":"Reproduce Issues Reliably","text":"<ol> <li>Capture exact request and headers.</li> <li>Save relevant logs with timestamps.</li> <li>Snapshot dependent service status (<code>docker compose ps</code>).</li> <li>Convert fix into regression test before merge.</li> </ol>"},{"location":"development-manual/debugging/#helpful-scripts","title":"Helpful Scripts","text":"<ul> <li><code>scripts/run_dev_cluster.sh</code> for verbose startup diagnostics.</li> <li><code>scripts/kafka_partition_scaler.py</code> to inspect topic stats.</li> <li><code>scripts/probes/check_slm.py</code> to validate LLM reachability.</li> </ul>"},{"location":"development-manual/environment/","title":"Environment Setup","text":"<p>title: Environment Setup slug: dev-environment version: 1.0.0 last-reviewed: 2025-10-15 audience: contributors owner: developer-experience reviewers:   - platform-engineering prerequisites:   - macOS/Linux (Windows via WSL2)   - Docker Desktop 4.36+   - Python 3.12+ verification:   - <code>make dev-up</code> succeeds   - <code>pytest</code> passes locally</p>"},{"location":"development-manual/environment/#environment-setup","title":"Environment Setup","text":"<p>Follow these steps to prepare a fully functional SomaAgent01 development environment.</p>"},{"location":"development-manual/environment/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/agent0ai/agent-zero.git\ncd agent-zero\n</code></pre>"},{"location":"development-manual/environment/#2-python-runtime","title":"2. Python Runtime","text":"<pre><code>python -m venv .venv\nsource .venv/bin/activate\npip install -r requirements.txt\n</code></pre> <p>Verify:</p> <pre><code>python -V  # Should return 3.12.x\npip check  # No broken dependencies\n</code></pre>"},{"location":"development-manual/environment/#3-frontend-dependencies","title":"3. Frontend Dependencies","text":"<pre><code>cd webui\nnpm install\ncd ..\n</code></pre> <p>Verify: <code>npm run lint</code> passes.</p>"},{"location":"development-manual/environment/#4-environment-variables","title":"4. Environment Variables","text":"<ol> <li>Copy <code>.env.example</code> to <code>.env</code>.</li> <li>Provide required keys:</li> <li><code>SLM_API_KEY</code> (or alternate model provider).</li> <li><code>POSTGRES_DSN</code>, <code>REDIS_URL</code> if using external services.</li> </ol>"},{"location":"development-manual/environment/#5-start-the-stack","title":"5. Start the Stack","text":"<pre><code>make dev-up\n</code></pre> <ul> <li>Gateway available at <code>http://localhost:${GATEWAY_PORT:-20016}</code>.</li> <li>UI (when started) available at <code>http://localhost:${AGENT_UI_PORT:-20015}</code>.</li> <li>Logs tail via <code>make dev-logs</code>.</li> </ul> <p>Verification: - <code>docker compose -p somaagent01 ps</code> shows services healthy. - <code>curl http://localhost:${GATEWAY_PORT:-20016}/health</code> returns <code>200</code>.</p>"},{"location":"development-manual/environment/#6-testing","title":"6. Testing","text":"<pre><code>pytest\npytest tests/playwright/test_realtime_speech.py --headed\n</code></pre>"},{"location":"development-manual/environment/#7-common-tasks","title":"7. Common Tasks","text":"Task Command Stop stack <code>make dev-down</code> Rebuild stack <code>make dev-rebuild</code> Tail a specific service <code>make dev-logs-svc SERVICES=gateway</code> Start selected services <code>make dev-up-services SERVICES=\"gateway tool-executor\"</code> Clean volumes <code>make clean</code> Lint Python <code>ruff check .</code> Format Python <code>black .</code>"},{"location":"development-manual/environment/#8-local-docker-compose-reference","title":"8. Local Docker Compose Reference","text":"<ul> <li>Single compose file <code>docker-compose.yaml</code> drives local development.</li> <li>Profiles:</li> <li><code>core</code>: Kafka (<code>${KAFKA_PORT:-20000}</code>), Redis (<code>${REDIS_PORT:-20001}</code>), Postgres (<code>${POSTGRES_PORT:-20002}</code>), OPA (<code>${OPA_PORT:-20009}</code>).</li> <li><code>dev</code>: Gateway (<code>${GATEWAY_PORT:-20016}</code>), Conversation Worker, Tool Executor, Memory Service (<code>${MEMORY_SERVICE_PORT:-20017}</code>), Agent UI (<code>${AGENT_UI_PORT:-20015}</code>).</li> <li>Bring-up examples:</li> <li><code>docker compose -p somaagent01 --profile core --profile dev -f docker-compose.yaml up -d</code></li> <li><code>docker compose -p somaagent01 --profile core -f docker-compose.yaml up -d kafka redis postgres</code></li> <li>Recommended Docker Desktop allocation: \u22658 CPUs, \u226512\u00a0GB RAM to keep Kafka/Postgres healthy.</li> <li>Frequently used containers:</li> <li><code>somaAgent01_gateway</code> \u2192 <code>http://localhost:${GATEWAY_PORT:-20016}</code></li> <li><code>somaAgent01_agent-ui</code> \u2192 <code>http://localhost:${AGENT_UI_PORT:-20015}</code></li> <li><code>somaAgent01_tool-executor</code></li> <li><code>somaAgent01_conversation-worker</code></li> <li>Verification checklist after <code>docker compose up</code>:</li> <li><code>curl http://localhost:${GATEWAY_PORT:-20016}/health</code></li> <li><code>docker compose -p somaagent01 ps</code> shows services <code>healthy</code></li> <li><code>docker exec somaAgent01_postgres psql -U soma -d somaagent01 -c \"SELECT NOW();\"</code></li> <li>Troubleshooting quick hits:</li> <li>Port clash on Kafka (<code>9092</code>): set <code>KAFKA_PORT</code> in <code>.env</code> or stop conflict.</li> <li>Gateway 5xx on boot: wait for OPA/OpenFGA migrations to finish.</li> <li>High CPU idle: disable optional profiles or lower <code>WHISPER_MODEL</code>.</li> </ul>"},{"location":"development-manual/environment/#9-ide-configuration","title":"9. IDE Configuration","text":"<ul> <li>VS Code recommended with Python and Docker extensions.</li> <li>Select <code>.venv</code> interpreter.</li> <li>Use <code>.vscode/launch.json</code> launchers for <code>run_ui.py</code> and <code>run_tunnel.py</code>.</li> </ul>"},{"location":"development-manual/environment/#10-troubleshooting","title":"10. Troubleshooting","text":"<ul> <li>Docker missing: Install from docker.com.</li> <li>Port conflicts: Adjust <code>WEB_UI_PORT</code> before invoking <code>make dev-up</code>.</li> <li>Realtime speech issues: Verify API keys and inspect <code>python/api/realtime_session.py</code> logs.</li> </ul> <p>Once the environment is verified, continue with the Contribution Workflow.</p>"},{"location":"development-manual/environment/#11-optional-enable-ssojwt-in-dev","title":"11. Optional: Enable SSO/JWT in Dev","text":"<p>The gateway supports JWT auth for local development. Choose one of the following and export as environment variables before <code>make dev-up</code> (or set in your shell):</p> <p>HS256 (shared secret)</p> <pre><code>export GATEWAY_REQUIRE_AUTH=true\nexport GATEWAY_JWT_SECRET=dev-secret\nexport GATEWAY_JWT_ALGORITHMS=HS256\n</code></pre> <p>JWKS (OIDC provider like Auth0/Okta/Entra)</p> <pre><code>export GATEWAY_REQUIRE_AUTH=true\nexport GATEWAY_JWKS_URL=\"https://YOUR_DOMAIN/.well-known/jwks.json\"\nexport GATEWAY_JWT_ALGORITHMS=RS256\nexport GATEWAY_JWT_AUDIENCE=\"api://somaagent01\"\nexport GATEWAY_JWT_ISSUER=\"https://YOUR_DOMAIN/\"\n</code></pre> <p>Notes</p> <ul> <li>Admin-only endpoints require a scope claim containing <code>admin</code> or <code>keys:manage</code>.</li> <li>Tenant is derived from the first matching claim in <code>GATEWAY_JWT_TENANT_CLAIMS</code> (default: <code>tenant,org,customer</code>).</li> <li>Health endpoints remain open for readiness checks.</li> </ul>"},{"location":"development-manual/legacy-apis/","title":"Legacy External APIs","text":"<p>These endpoints are served by the legacy Python API layer (<code>python/api/*</code>). They are not exposed by the FastAPI gateway and remain for backward compatibility. Prefer the versioned gateway under <code>/v1</code> for new integrations.</p> <p>Base URL varies by deployment; examples assume the same host as the UI.</p> <p>Endpoints</p> <ul> <li>POST <code>/api_message</code></li> <li> <p>Send a message with optional attachments and <code>lifetime_hours</code>; returns <code>context_id</code> and response content.</p> </li> <li> <p>GET|POST <code>/api_log_get</code></p> </li> <li> <p>Retrieve recent logs for a given <code>context_id</code>.</p> </li> <li> <p>POST <code>/api_terminate_chat</code></p> </li> <li> <p>Delete a chat context by <code>context_id</code>.</p> </li> <li> <p>POST <code>/api_reset_chat</code></p> </li> <li> <p>Reset a chat context history while keeping the <code>context_id</code> active.</p> </li> <li> <p>POST <code>/api_files_get</code></p> </li> <li> <p>Retrieve previously uploaded files by absolute path; returns base64 payloads.</p> </li> <li> <p>POST <code>/realtime_session</code></p> </li> <li>Broker a realtime speech session with a provider (OpenAI). Returns a short\u2011lived client secret for WebRTC negotiation.</li> </ul> <p>Authentication</p> <ul> <li>X-API-KEY header where required.</li> <li>Some deployments also accept bearer tokens.</li> </ul> <p>Notes</p> <ul> <li>These APIs may be removed in a future major release. Migrate clients to <code>/v1</code> equivalents where available.</li> </ul>"},{"location":"development-manual/release-process/","title":"Release Process","text":"<p>This process governs how SomaAgent01 versions are cut, validated, and published. Follow it for minor and patch releases; major releases require additional product approval.</p>"},{"location":"development-manual/release-process/#1-release-cadence","title":"1. Release Cadence","text":"<ul> <li>Bi-weekly minor releases (odd weeks).</li> <li>Patch releases as needed for hot fixes.</li> </ul>"},{"location":"development-manual/release-process/#2-preparation","title":"2. Preparation","text":"<ol> <li>Ensure <code>soma_integration</code> is up to date with <code>main</code>.</li> <li>Create a release branch: <code>release/v&lt;major&gt;.&lt;minor&gt;.0</code>.</li> <li>Audit open issues and PRs; defer unfinished work.</li> <li>Update <code>docs/changelog.md</code> with highlights and links to manual updates.</li> </ol>"},{"location":"development-manual/release-process/#3-verification","title":"3. Verification","text":"<p>Run the full validation suite:</p> <pre><code>make fmt-check\nmake lint\npytest\npytest tests/playwright --headed\nmake docs-verify\nmake helm-verify\n</code></pre> <ul> <li><code>make helm-verify</code> packages Helm charts and validates values files.</li> <li>Capture evidence (screenshots, logs) and attach to release ticket.</li> </ul>"},{"location":"development-manual/release-process/#4-release-review","title":"4. Release Review","text":"<ul> <li>Hold release readiness review with platform, QA, docs, and product.</li> <li>Confirm documentation updates across all manuals.</li> <li>Sign off recorded in release ticket.</li> </ul>"},{"location":"development-manual/release-process/#5-tagging-packaging","title":"5. Tagging &amp; Packaging","text":"<ol> <li>Bump version identifiers in <code>pyproject.toml</code>, <code>package.json</code>, and Helm charts.</li> <li>Commit with <code>chore(release): v&lt;major&gt;.&lt;minor&gt;.0</code>.</li> <li>Tag: <code>git tag v&lt;major&gt;.&lt;minor&gt;.0</code> and push tags.</li> <li>Publish artifacts:</li> <li>Python package (if applicable) via Poetry.</li> <li>Docker images to registry (<code>agent0ai/agent-zero:&lt;version&gt;</code>).</li> <li>Helm charts packaged and uploaded to artifact store.</li> </ol>"},{"location":"development-manual/release-process/#6-deployment","title":"6. Deployment","text":"<ul> <li>Promote to staging via Argo CD or Helm release.</li> <li>Run smoke tests (<code>scripts/smoke_test.py --env staging</code>).</li> <li>Promote to production after sign-off; monitor dashboards for 24 hours.</li> </ul>"},{"location":"development-manual/release-process/#7-post-release","title":"7. Post-Release","text":"<ul> <li>Close release ticket and associated issues.</li> <li>Update Onboarding and User manuals if workflows changed.</li> <li>Archive runbooks, logs, and metrics snapshots in release folder (<code>docs/releases/&lt;version&gt;/</code>).</li> </ul>"},{"location":"development-manual/release-process/#8-hotfix-process","title":"8. Hotfix Process","text":"<ul> <li>Branch from the latest tag (<code>git checkout -b hotfix/v&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code>).</li> <li>Apply fix, add tests, update changelog.</li> <li>Tag as <code>v&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code>.</li> <li>Notify stakeholders immediately after deployment.</li> </ul>"},{"location":"development-manual/release-process/#9-checklist","title":"9. Checklist","text":"<ul> <li>[ ] CI &amp; docs workflows green.</li> <li>[ ] Changelog updated.</li> <li>[ ] Manuals reviewed and signed off.</li> <li>[ ] Artifacts published.</li> <li>[ ] Deployment validated in staging and production.</li> <li>[ ] Post-release metrics captured.</li> </ul>"},{"location":"development-manual/runbooks/","title":"Operational Runbooks","text":"<p>These runbooks capture repeatable operational tasks for developers and SREs. Update them after every drill or significant change.</p>"},{"location":"development-manual/runbooks/#1-deploy-soma-infra-stack-locally-kind","title":"1. Deploy Soma Infra &amp; Stack Locally (Kind)","text":"<p>Purpose: Validate full stack changes against a local Kubernetes cluster.</p> <p>Procedure:</p> <pre><code># Create cluster\nkind create cluster --name soma-dev\n\n# Load custom image (optional)\ndocker build -t agent-zero:dev .\nkind load docker-image agent-zero:dev --name soma-dev\n\n# Install shared infra\nhelm upgrade --install soma-infra infra/helm/soma-infra \\\n  --namespace soma --create-namespace \\\n  -f infra/helm/values-dev.yaml\n\n# Install application stack\nhelm upgrade --install soma-stack infra/helm/soma-stack \\\n  --namespace soma \\\n  -f infra/helm/values-dev.yaml\n\n# Verify\nkubectl get pods -n soma\nkubectl get svc -n soma\n</code></pre> <p>Verification: All pods <code>Running</code>; <code>/health</code> endpoint returns <code>200</code> after port-forwarding <code>gateway</code> service.</p> <p>Cleanup: <code>kind delete cluster --name soma-dev</code>.</p>"},{"location":"development-manual/runbooks/#2-restart-conversation-worker-in-production","title":"2. Restart Conversation Worker in Production","text":"<ol> <li>Authenticate with <code>kubectl</code> (<code>kubectx</code> to prod cluster).</li> <li>Identify deployment: <code>kubectl get deploy -n soma-prod | grep conversation-worker</code>.</li> <li>Restart: <code>kubectl rollout restart deploy/conversation-worker -n soma-prod</code>.</li> <li>Monitor rollout: <code>kubectl rollout status deploy/conversation-worker -n soma-prod</code>.</li> <li>Verify metrics dashboard shows healthy request rate.</li> </ol>"},{"location":"development-manual/runbooks/#3-rotate-soma-slm-api-key","title":"3. Rotate Soma SLM API Key","text":"<ol> <li>Generate new key via internal portal.</li> <li>Store in Vault path <code>kv/slm/api-key</code> with metadata.</li> <li>Update <code>.env</code> (dev) or Helm secret values (prod).</li> <li>Trigger rollout of gateway and conversation worker.</li> <li>Run smoke test to confirm authentication.</li> <li>Update <code>docs/changelog.md</code> with rotation details.</li> </ol>"},{"location":"development-manual/runbooks/#4-restore-backup","title":"4. Restore Backup","text":"<ol> <li>Download backup archive from secure storage.</li> <li>Upload via UI (Settings \u2192 Backup \u2192 Restore).</li> <li>Choose overwrite or preserve settings.</li> <li>Confirm knowledge files, memory, and chats restored correctly.</li> <li>Document restoration in <code>changelog</code> and incident tracker.</li> </ol>"},{"location":"development-manual/runbooks/#5-emergency-shutdown","title":"5. Emergency Shutdown","text":"<ol> <li>Notify stakeholders on <code>#soma-oncall</code>.</li> <li>Disable public tunnels: turn off Cloudflare tunnel in UI or revoke token.</li> <li>Scale deployments to zero: <code>kubectl scale deploy --all --replicas=0 -n soma-prod</code>.</li> <li>Revoke API keys via Vault.</li> <li>Document actions and start incident response procedure (see Security Manual).</li> </ol>"},{"location":"development-manual/runbooks/#maintenance","title":"Maintenance","text":"<ul> <li>Review runbooks quarterly.</li> <li>Capture lessons learned from incidents and update procedures.</li> <li>Link to supporting diagrams or scripts where applicable.</li> </ul>"},{"location":"development-manual/testing/","title":"Testing Strategy","text":"<p>SomaAgent01 enforces a layered test strategy aligned with real-service execution. Tests interact with live dependencies unless explicitly mocked.</p>"},{"location":"development-manual/testing/#test-pyramid","title":"Test Pyramid","text":"<pre><code>graph TD\n    Unit[Unit Tests]\n    Integration[Integration Tests]\n    E2E[End-to-End]\n\n    Unit --&gt; Integration --&gt; E2E\n</code></pre> Layer Scope Command Unit Functions, helpers, schema validation <code>pytest tests/unit</code> Integration Gateway routes, memory, tool executor contracts <code>pytest tests/integration</code> End-to-End Full UI + backend flows (Playwright) <code>pytest tests/playwright --headed</code>"},{"location":"development-manual/testing/#fixtures-data","title":"Fixtures &amp; Data","text":"<ul> <li><code>tests/conftest.py</code>: shared FastAPI client, settings overrides.</li> <li><code>tests/fixtures/</code>: factories for memory items, Kafka messages.</li> <li>Use <code>tests/context/</code> for long-running conversational scenarios.</li> </ul>"},{"location":"development-manual/testing/#real-service-policy","title":"Real Service Policy","text":"<ul> <li>Tests run against live dependencies (Postgres, Redis, Kafka). Ensure stack is up via <code>make dev-up</code>.</li> <li>For destructive tests, use dedicated tenants or ephemeral namespaces.</li> </ul>"},{"location":"development-manual/testing/#ci-pipeline","title":"CI Pipeline","text":"<ol> <li>Lint (<code>make lint</code>).</li> <li>Unit + integration tests (<code>pytest</code>).</li> <li>Playwright suite (headless via xvfb container).</li> <li>Collect screenshots and logs on failure.</li> </ol>"},{"location":"development-manual/testing/#adding-tests","title":"Adding Tests","text":"<ol> <li>Identify coverage gap or regression.</li> <li>Add descriptive test under correct suite.</li> <li>Update docs if user-facing behavior changes.</li> <li>Run targeted command locally before pushing.</li> </ol>"},{"location":"development-manual/testing/#load-resilience-testing","title":"Load &amp; Resilience Testing","text":"<ul> <li><code>scripts/load/locustfile.py</code> (planned) exercises conversation throughput.</li> <li>Monitor metrics via Prometheus dashboards; capture baseline before stressing.</li> </ul>"},{"location":"development-manual/testing/#regression-tracking","title":"Regression Tracking","text":"<ul> <li>Tag flaky or bug-specific tests with <code>@pytest.mark.issue123</code>.</li> <li>Document regressions and fixes in <code>docs/changelog.md</code>.</li> </ul>"},{"location":"development-manual/tooling/","title":"Developer Tooling","text":"<p>This chapter lists the sanctioned tooling for SomaAgent01 development and how to use it effectively.</p>"},{"location":"development-manual/tooling/#command-interface","title":"Command Interface","text":"<ul> <li>Makefile targets (see <code>Makefile</code>):</li> <li><code>make build</code>, <code>make up</code>, <code>make down</code>, <code>make logs</code>, <code>make clean</code>.</li> <li><code>make dev-up</code>, <code>make dev-down</code>, <code>make dev-logs</code>, <code>make dev-rebuild</code>, <code>make dev-up-services SERVICES=gateway</code>.</li> <li><code>make docs-install</code>, <code>make docs-build</code>, <code>make docs-verify</code>.</li> <li>Python environment: <code>python3 -m venv .venv &amp;&amp; source .venv/bin/activate &amp;&amp; pip install -r requirements.txt</code>.</li> <li>Node toolchain: <code>npm install &amp;&amp; npm run build</code> under <code>webui/</code> when working on the UI.</li> </ul>"},{"location":"development-manual/tooling/#linting-formatting","title":"Linting &amp; Formatting","text":"Language Tool Command Python Ruff, Black <code>ruff check .</code>, <code>black .</code> JavaScript/TypeScript ESLint, Prettier <code>npm run lint</code>, <code>npm run format</code> Markdown/Docs MkDocs + markdownlint <code>make docs-verify</code>"},{"location":"development-manual/tooling/#documentation-pipeline","title":"Documentation Pipeline","text":"<ul> <li>MkDocs configuration: <code>mkdocs.yml</code>.</li> <li>Local authoring: <code>make docs-install</code> once, then <code>make docs-build</code> (strict) or <code>make docs-serve</code>.</li> <li>CI parity: <code>.github/workflows/docs.yml</code> runs <code>make docs-verify</code>.</li> </ul>"},{"location":"development-manual/tooling/#observability-debugging","title":"Observability &amp; Debugging","text":"<ul> <li>Logs: <code>make dev-logs</code> or <code>docker compose logs -f gateway</code>.</li> <li>Profiling: <code>scripts/profiling/profile_gateway.py</code> (use with caution in dev).</li> <li>Tracing: Jaeger UI at <code>http://localhost:16686</code> when observability profile enabled.</li> </ul>"},{"location":"development-manual/tooling/#git-hooks","title":"Git Hooks","text":"<ul> <li>Optional pre-commit configuration stored in <code>.pre-commit-config.yaml</code> (run <code>pre-commit install</code>).</li> <li>Hooks enforce formatting, linting, and documentation checklist reminders.</li> </ul>"},{"location":"development-manual/tooling/#automation-agents","title":"Automation Agents","text":"<ul> <li>Internal agents follow the same standards; reference this manual before enabling automated commits.</li> <li>Monitor agent contributions via <code>scripts/automation/report_agent_activity.py</code>.</li> </ul>"},{"location":"development-manual/tooling/#verification","title":"Verification","text":"<ul> <li>Run <code>pytest</code> for the Python test suite.</li> <li><code>make docs-verify</code> prior to publishing documentation changes.</li> <li><code>docker compose -p somaagent01 -f docker-compose.yaml ps</code> to confirm service health after stack changes.</li> </ul>"},{"location":"messaging/","title":"Messaging Architecture Documentation","text":"<p>This directory houses living documentation for the messaging architecture overhaul tracked on the <code>messaging_architecture</code> branch.</p>"},{"location":"messaging/#contents","title":"Contents","text":"<ul> <li><code>baseline.md</code> \u2013 Captures the current state of the docker-compose stack, environment contracts, and smoke checks (Wave\u202f0 deliverable).</li> <li><code>release.md</code> \u2013 Final runbook covering deployment, rollback, and validation steps (targeted for Sprint\u202f4).</li> <li>Additional sub-documents for tooling, observability, and troubleshooting as they are produced.</li> </ul>"},{"location":"messaging/#maintenance-notes","title":"Maintenance Notes","text":"<ul> <li>Keep documents versioned alongside the roadmap milestones (Wave/Sprint references).</li> <li>Update tables of contents and cross-links whenever new documents are added.</li> <li>Reference acceptance criteria from <code>ROADMAP_CANONICAL.md</code> and <code>ROADMAP_SPRINTS.md</code> when drafting new guides.</li> <li>Keep automation aligned with documentation (e.g., <code>scripts/check_stack.py</code> referenced in <code>baseline.md</code>).</li> </ul>"},{"location":"messaging/baseline/","title":"Messaging Stack Baseline (Wave 0)","text":"<p>This document captures the current local runtime expectations for the messaging stack during Wave\u202f0 / Sprint\u202f0. It is the source of truth for verifying that the docker-compose stack starts, the key dependencies are reachable, and the conversational pipeline is ready for subsequent refactors.</p>"},{"location":"messaging/baseline/#compose-services-developer-profile","title":"Compose Services (developer profile)","text":"Service Purpose Host Port <code>kafka</code> Single-node KRaft broker (<code>confluentinc/cp-kafka:7.4.0</code>) <code>${KAFKA_PORT:-20000}</code> <code>kafka-init</code> Bootstraps baseline topics via <code>infra/kafka/init-topics.sh</code> \u2014 <code>postgres</code> Primary metadata store (<code>postgres:16-alpine</code>) <code>${POSTGRES_PORT:-20002}</code> <code>redis</code> Session cache and budget tracker (<code>redis:7-alpine</code>) <code>${REDIS_PORT:-20001}</code> <code>opa</code> Policy engine (<code>openpolicyagent/opa:0.64.0</code>) <code>${OPA_PORT:-20009}</code> <code>gateway</code> FastAPI ingress (<code>services/gateway/main.py</code>) <code>${GATEWAY_PORT:-20016}</code> <code>conversation-worker</code> Kafka consumer producing SLM/tool outputs \u2014 <code>tool-executor</code> Runs registered tools and emits <code>tool.results</code> \u2014 <code>memory-service</code> gRPC memory API <code>${MEMORY_SERVICE_PORT:-20017}</code> <code>agent-ui</code> Developer UI (<code>run_ui.py</code>) <code>${AGENT_UI_PORT:-20015}</code> <p>Profiles: Launch with <code>docker compose --profile core --profile dev up -d</code> to include all messaging services without mocks.</p>"},{"location":"messaging/baseline/#environment-contract","title":"Environment Contract","text":"Variable Default Notes <code>KAFKA_BOOTSTRAP_SERVERS</code> <code>kafka:9092</code> (in-container) / <code>localhost:20000</code> (host) Shared across gateway, worker, tool executor. <code>CONVERSATION_INBOUND</code> <code>conversation.inbound</code> Gateway publishes inbound chat here. <code>CONVERSATION_OUTBOUND</code> <code>conversation.outbound</code> Worker streams responses on this topic. <code>TOOL_REQUESTS_TOPIC</code> <code>tool.requests</code> Worker \u279c tool executor traffic. <code>TOOL_RESULTS_TOPIC</code> <code>tool.results</code> Tool executor \u279c worker/gateway responses. <code>REDIS_URL</code> <code>redis://redis:6379/0</code> Cache + budget ledger. <code>POSTGRES_DSN</code> <code>postgresql://soma:soma@postgres:5432/somaagent01</code> Session/event persistence. <code>GATEWAY_PORT</code> <code>20016</code> Exposes FastAPI ingress to the host. <code>AGENT_UI_PORT</code> <code>20015</code> UI served at <code>http://localhost:20015</code>."},{"location":"messaging/baseline/#smoke-checks","title":"Smoke Checks","text":"<p>Run the automated smoke script after launching the stack:</p> <pre><code>python scripts/check_stack.py\n</code></pre> <p>The script validates:</p> <ol> <li>Gateway health \u2014 <code>GET /health</code> returns <code>200 OK</code>.</li> <li>Kafka connectivity \u2014 required topics exist and the <code>conversation-worker</code> consumer group is registered.</li> <li>Redis availability \u2014 <code>PING</code> succeeds using the configured URL.</li> <li>Postgres connectivity \u2014 connection to the configured DSN succeeds and <code>sessions.events</code> table exists.</li> </ol> <p>A non-zero exit code indicates a blocking issue. Review the troubleshooting section below and re-run once resolved.</p>"},{"location":"messaging/baseline/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Gateway health fails: Inspect <code>docker compose logs gateway</code> and ensure no port conflicts with <code>${GATEWAY_PORT}</code>.</li> <li>Kafka topics missing: Confirm <code>kafka-init</code> completed successfully and re-run via <code>docker compose run --rm kafka-init</code>.</li> <li>Consumer group not registered: Verify the <code>conversation-worker</code> logs for startup errors; the service must commit offsets at least once to appear.</li> <li>Redis unavailable: Check for port conflicts or persistent volume corruption at <code>redis_data</code>; clearing the volume may help.</li> <li>Postgres failures: Ensure the <code>postgres</code> container is healthy and migrations in <code>infra/postgres/init</code> executed.</li> </ul>"},{"location":"messaging/baseline/#maintenance-checklist","title":"Maintenance Checklist","text":"<ul> <li>Update this document whenever service ports or topic names change.</li> <li>Keep smoke checks aligned with <code>scripts/check_stack.py</code> behavior.</li> <li>Reference sprint IDs (e.g., <code>W0-S0</code>) in Git history when updating baseline requirements.</li> </ul>"},{"location":"onboarding-manual/","title":"Onboarding Manual","text":"<p>Welcome to SomaAgent01. This manual guides new contributors through their first 90 days, aligning expectations, knowledge resources, and success metrics.</p>"},{"location":"onboarding-manual/#structure","title":"Structure","text":"<ul> <li>Orientation Checklist</li> <li>First 90 Days Plan</li> <li>Toolchain Primer</li> <li>Team Directory</li> <li>FAQ</li> </ul> <p>Coordinate with your mentor and manager to tailor this plan. Mark off tasks in the onboarding tracker and update stakeholders weekly.</p>"},{"location":"onboarding-manual/faq/","title":"Onboarding FAQ","text":"<p>When do I get production access? After the 30-day review and security training completion. Manager submits access request.</p> <p>Who approves my PTO during onboarding? Submit via HR system; manager must approve. Notify mentor for scheduling impacts.</p> <p>How do I request hardware accessories? Open a ticket with IT helpdesk. Include shipping address and manager approval.</p> <p>Where do I find design assets? Access Figma workspace (invitation sent day 1). For missing access, ping <code>@product</code>.</p> <p>What if I miss onboarding sessions? Recordings live in the LMS. Schedule a makeup session with the presenter.</p> <p>Can I contribute before completing orientation? Yes, but ensure environment setup and security requirements met. All contributions follow the Contribution Workflow.</p>"},{"location":"onboarding-manual/first-90-days/","title":"First 90 Days Plan","text":"<p>This plan outlines expectations and milestones for new SomaAgent01 team members across their first three months. Customize with your manager while maintaining these core outcomes.</p>"},{"location":"onboarding-manual/first-90-days/#days-130-ramp-up","title":"Days 1\u201330 (Ramp Up)","text":"<p>Goals: - Ship one documentation update via Pull Request following the Contribution Workflow. - Pair-program with mentor on a low-risk bug or test addition. - Shadow on-call handoff to understand operational cadence.</p> <p>Milestones: - Environment verified (<code>make dev-up</code>, <code>pytest</code>). - Documented first impressions in <code>docs/changelog.md</code> under onboarding notes.</p>"},{"location":"onboarding-manual/first-90-days/#days-3160-deliver","title":"Days 31\u201360 (Deliver)","text":"<p>Goals: - Own a small feature or refactor spanning backend and documentation. - Present a brown-bag on a technical topic (architecture, testing, etc.). - Contribute to the Onboarding Manual with lessons learned.</p> <p>Milestones: - Feature PR merged with tests and docs. - Added new entry to Development Manual or updated existing guidance.</p>"},{"location":"onboarding-manual/first-90-days/#days-6190-lead","title":"Days 61\u201390 (Lead)","text":"<p>Goals: - Lead a release candidate dry run or incident drill. - Mentor another new hire or contributor through their first PR. - Identify and document a process improvement in the Changelog.</p> <p>Milestones: - Ran release dry run successfully. - Added new runbook entry or improved existing one.</p>"},{"location":"onboarding-manual/first-90-days/#verification","title":"Verification","text":"<ul> <li>Manager reviews progress at 30/60/90 day checkpoints.</li> <li>Updates recorded in onboarding tracker and shared in weekly syncs.</li> <li>Final 90-day review includes summary of achievements and next quarter goals.</li> </ul>"},{"location":"onboarding-manual/orientation/","title":"Orientation Checklist","text":"<p>Complete these steps during your first week to gain access, context, and support.</p>"},{"location":"onboarding-manual/orientation/#day-01","title":"Day 0\u20131","text":"<ul> <li>[ ] Sign all required paperwork and NDAs.</li> <li>[ ] Receive hardware and credentials (email, GitHub, Slack).</li> <li>[ ] Join Slack channels: <code>#soma-general</code>, <code>#soma-agent-zero</code>, <code>#soma-oncall</code>.</li> <li>[ ] Schedule 1:1 with manager and assigned mentor.</li> </ul>"},{"location":"onboarding-manual/orientation/#day-23","title":"Day 2\u20133","text":"<ul> <li>[ ] Review the User Manual to understand the product surface.</li> <li>[ ] Read the Architecture Overview.</li> <li>[ ] Set up environment per Environment Setup.</li> <li>[ ] Pair with mentor to run <code>make dev-up</code> and validate the stack.</li> </ul>"},{"location":"onboarding-manual/orientation/#day-45","title":"Day 4\u20135","text":"<ul> <li>[ ] Attend platform overview session (recording linked in LMS).</li> <li>[ ] Read security baseline and sign acceptable-use policy.</li> <li>[ ] Complete onboarding quiz (link in LMS).</li> <li>[ ] Update onboarding tracker with blockers or questions.</li> </ul>"},{"location":"onboarding-manual/orientation/#verification","title":"Verification","text":"<ul> <li>Manager confirms completion in onboarding system.</li> <li>New hire posts intro message in <code>#soma-general</code>.</li> <li>Access requests approved (GitHub, Vault, analytics).</li> </ul>"},{"location":"onboarding-manual/team-contacts/","title":"Team Directory","text":"<p>Use this directory to connect with the right experts. Keep it updated when roles change.</p> Role Name Slack Responsibilities Engineering Manager TBD <code>@eng-manager</code> Prioritization, staffing, escalations Tech Lead TBD <code>@tech-lead</code> Architecture decisions, reviews Product Manager TBD <code>@product</code> Roadmap, user feedback Platform Operations TBD <code>@sre-oncall</code> Deployments, infrastructure Security Engineer TBD <code>@security</code> Secrets, audits Docs Lead TBD <code>@docs-lead</code> Documentation governance Onboarding Mentor Assigned per hire <code>@mentor</code> Weekly syncs, unblockers <p>[!NOTE] Update the placeholders (<code>TBD</code>) with current names and usernames as part of the onboarding audit. Link to the internal directory once the PeopleOps system integration is complete.</p>"},{"location":"onboarding-manual/toolchain/","title":"Toolchain Primer","text":"<p>This primer introduces the core tools you will use daily on SomaAgent01.</p>"},{"location":"onboarding-manual/toolchain/#communication-knowledge","title":"Communication &amp; Knowledge","text":"<ul> <li>Slack channels: <code>#soma-agent-zero</code>, <code>#soma-oncall</code>, <code>#soma-docs</code>.</li> <li>Documentation hub: <code>docs/README.md</code> (new structure) and MkDocs site (published internally).</li> <li>Incident updates: <code>status.somaagent01.dev</code>.</li> </ul>"},{"location":"onboarding-manual/toolchain/#development-tools","title":"Development Tools","text":"Purpose Tool Notes Code editor VS Code Recommended extensions: Python, Docker, Markdown All in One Version control Git + GitHub Use SSH keys; enable 2FA Python runtime <code>pyenv</code> (optional) or system Python 3.12 Virtualenv at <code>.venv</code> Package mgmt <code>pip</code>, <code>npm</code>, optional <code>poetry</code> Install dependencies as documented Containers Docker Desktop Allocate \u22654 CPUs, 8 GB RAM"},{"location":"onboarding-manual/toolchain/#commands-to-memorize","title":"Commands to Memorize","text":"<pre><code>make dev-up        # Start full stack\nmake dev-down      # Stop stack\nmake dev-logs      # Tail logs\nmake fmt lint      # Format &amp; lint\npytest             # Run test suites\nmake docs-verify   # Markdown lint, link check, MkDocs build\n</code></pre>"},{"location":"onboarding-manual/toolchain/#credentials-access","title":"Credentials &amp; Access","text":"<ul> <li>Request Vault access via Access Manager ticket.</li> <li>Obtain Soma SLM API key from platform team; store in 1Password and <code>.env</code>.</li> <li>GitHub membership handled by people-ops; verify org access on day one.</li> </ul>"},{"location":"onboarding-manual/toolchain/#self-checks","title":"Self-Checks","text":"<ul> <li>Confirm <code>python --version</code> outputs 3.12.x.</li> <li><code>docker info</code> shows minimum resource allocation.</li> <li><code>npm -v</code> returns 8.x or later.</li> </ul> <p>If any tool is missing or incompatible, contact <code>#soma-helpdesk</code>.</p>"},{"location":"reference/","title":"Reference","text":"<p>This section has been retired. Please use the four manuals in the navigation:</p> <ul> <li>User Manual</li> <li>Technical Manual</li> <li>Development Manual</li> <li>Onboarding Manual</li> </ul>"},{"location":"technical-manual/","title":"SomaAgent01 Technical Manual","text":"<p>This manual is the authoritative source on how SomaAgent01 is architected, deployed, and integrated with the wider Soma platform. It consolidates diagrams, configuration schemas, and operational decision records.</p>"},{"location":"technical-manual/#sections","title":"Sections","text":"<ul> <li>Architecture: canonical diagrams, service topology, and rationale.</li> <li>Infrastructure &amp; Deployments: Docker Compose and Helm blueprints.</li> <li>Integrations: External systems, APIs, and data contracts.</li> <li>Security &amp; Compliance: AuthN/Z, secrets, and audit posture.</li> <li>Data Flows: Streaming and persistence pipelines.</li> </ul> <p>Refer to the Development Manual for engineering workflows, and to the Onboarding Manual for role-based enablement.</p>"},{"location":"technical-manual/architecture/","title":"SomaAgent01 Architecture Overview","text":"<p>This document captures the current service layout, target consolidation, and implementation roadmap for the Soma stack as of 2025-10-15. It supersedes earlier partial diagrams and aligns with code paths in <code>services/</code>, <code>common/</code>, and <code>infra/</code>.</p>"},{"location":"technical-manual/architecture/#1-service-landscape-snapshot","title":"1. Service Landscape Snapshot","text":"Alias Repository components Owner Primary protocol Typical ports Status SA01 (SomaAgent01) <code>agent.py</code>, <code>services/conversation_worker/main.py</code>, <code>services/gateway/main.py</code> Agents gRPC (high-throughput) 50051 (planned) gRPC stubs present; HTTP gateway on 8010 still active SB (SomaBrain) <code>services/memory_service/main.py</code> Memory gRPC / HTTP 20017 Implemented; exposed via compose SAH (SomaAgentHub) <code>services/ui/main.py</code>, <code>run_ui.py</code> Experience FastAPI (HTTP) 8080 Running via <code>agent-ui</code> and <code>gateway</code> services SMF (SomaFractalMemory) future <code>qdrant</code> add-on Knowledge Async HTTP 50053 / 6333-6334 Planned profile (not yet in compose) Auth <code>infra/helm/soma-infra/charts/auth</code> Platform HTTP 8080 Helm chart deployed cluster-wide OPA <code>services/common/policy_client.py</code>, compose <code>opa</code> service Platform HTTP 8181 Deployed in compose and Helm Kafka <code>docker-compose.yaml</code> Platform TCP 9092 Single node in compose, 3-node StatefulSet in Helm Redis <code>docker-compose.yaml</code> Platform TCP 6379 Single instance; cluster planned Prometheus <code>infra/observability/prometheus.yml</code> Platform HTTP 9090 Live in compose and Helm <p>| Vault | future compose add-on | Platform | HTTP | 8200 | Dev mode compose; Helm chart forthcoming | | Etcd | <code>infra/helm/soma-infra/charts/etcd</code> | Platform | HTTP | 2379 | Placeholder chart available |</p> <p>The stack currently runs four application services plus twelve infrastructure containers under Docker Compose. Consolidation work reduces duplication between local and cluster deployments.</p>"},{"location":"technical-manual/architecture/#2-shared-infrastructure-goal","title":"2. Shared Infrastructure Goal","text":""},{"location":"technical-manual/architecture/#21-target-state","title":"2.1 Target State","text":"<p>Shared services (Auth, OPA, Kafka, Redis, Prometheus, Vault, Etcd) run once per cluster inside the <code>soma-infra</code> namespace. Applications reference them via Kubernetes DNS (<code>*.soma.svc.cluster.local</code>).</p> Service Deployment strategy Repository anchor Rationale Auth Deployment + Service <code>infra/helm/soma-infra/charts/auth</code> Centralize signing keys OPA Deployment with sidecar <code>infra/helm/soma-infra/charts/opa</code> Prevent policy drift Kafka StatefulSet (3 nodes) <code>infra/helm/soma-infra/charts/kafka</code> Shared event backbone Redis RedisCluster (6 pods) <code>infra/helm/soma-infra/charts/redis</code> Shared cache and rate limiting Prometheus Operator + Deployment <code>infra/helm/soma-infra/charts/prometheus</code> Metrics and alerting; dashboards external Vault Deployment + Agent injector <code>infra/helm/soma-infra/charts/vault</code> Single secret source Etcd StatefulSet <code>infra/helm/soma-infra/charts/etcd</code> Feature flag backend"},{"location":"technical-manual/architecture/#22-resulting-footprint","title":"2.2 Resulting Footprint","text":"<ul> <li>Application services: 4.</li> <li>Infra services: 7 shared deployments.</li> <li>Pods per environment: ~25 (down from 40).</li> </ul>"},{"location":"technical-manual/architecture/#3-repository-alignment-plan","title":"3. Repository Alignment Plan","text":"<pre><code>agent-zero/\n  services/\n    conversation_worker/\n    gateway/\n    memory_service/\n    tool_executor/\n    ui/\n  infra/\n    docker-compose.yaml\n    helm/\n      soma-infra/\n      soma-stack/\n  docs/\n    technical-manual/architecture.md (this file)\n</code></pre> <p>Planned adjustments:</p> <ol> <li>Introduce service-specific subdirectories (<code>services/sa01</code>, etc.) as we modularize entrypoints.</li> <li>Ensure <code>infra/helm/soma-stack</code> consumes the shared infra chart and removes duplicated settings.</li> <li>Keep <code>common/</code> as the shared client library for configuration, telemetry, and memory access.</li> </ol>"},{"location":"technical-manual/architecture/#4-configuration-baseline","title":"4. Configuration Baseline","text":"<p>All services load shared settings via <code>common/config/settings.py</code>. SA01 overrides live in <code>services/common/settings_sa01.py</code>.</p> <p>Key defaults: - Kafka: <code>kafka.soma.svc.cluster.local:9092</code> - Redis: <code>redis.soma.svc.cluster.local:6379</code> - Postgres: <code>postgres.soma.svc.cluster.local:5432</code> - OPA: <code>http://opa.soma.svc.cluster.local:8181</code> - Auth: <code>http://auth.soma.svc.cluster.local:8080</code> - Etcd: <code>etcd.soma.svc.cluster.local:2379</code> - Metrics: Prometheus scrape endpoints defined in <code>infra/observability/prometheus.yml</code></p>"},{"location":"technical-manual/architecture/#5-deployment-model","title":"5. Deployment Model","text":"Layer Tooling Outcome Cluster Managed Kubernetes (EKS/GKE/AKS) Scalable, managed control plane GitOps Argo CD tracking <code>infra/helm</code> Declarative rollouts, audit trail Packaging Helm chart <code>soma-stack</code> + <code>soma-infra</code> dependency Single artifact per environment Traffic Istio weighted routing Safe canaries and blue/green CI/CD <code>.github/workflows/ci.yml</code> Lint, test, Kind-based Helm install"},{"location":"technical-manual/architecture/#6-observability-stack","title":"6. Observability Stack","text":"<ul> <li>Metrics: <code>/metrics</code> exposed on FastAPI workers, scraped by Prometheus.</li> <li>Tracing: OpenTelemetry exporters configured via <code>common/utils/trace.py</code> to Jaeger.</li> <li>Logging: JSON logs ingested by Loki via Promtail (Helm update pending).</li> <li>Alerting: Alertmanager rules for latency (&gt;200 ms), error rate (&gt;1%), Kafka lag (&gt;5k).</li> </ul>"},{"location":"technical-manual/architecture/#7-resource-footprint","title":"7. Resource Footprint","text":"Category Before Target Application services 4 4 Infra services 12 7 Pods 30-40 20-25 Helm releases 16 5"},{"location":"technical-manual/architecture/#8-implementation-roadmap","title":"8. Implementation Roadmap","text":"<ol> <li>Finish provider SDK skeleton under <code>common/provider_sdk/</code>.</li> <li>Complete Vault and Etcd Helm charts with production values.</li> <li>Extend CI to run Kind-based installs and smoke tests (<code>scripts/smoke_test.py</code>).</li> <li>Update runbooks in the Operations Manual after each deployment milestone.</li> </ol>"},{"location":"technical-manual/architecture/#9-mermaid-diagram","title":"9. Mermaid Diagram","text":"<pre><code>flowchart TB\n  subgraph Infra[Shared Infra]\n    Auth[Auth Service]\n    OPA[OPA]\n    Kafka[Kafka Cluster]\n    Redis[Redis Cluster]\n    Vault[Vault]\n    Etcd[Etcd]\n    Prom[Prometheus]\n  end\n\n  subgraph Apps[Application Services]\n    SA01[SomaAgent01]\n    SB[SomaBrain]\n    SAH[SomaAgentHub]\n    SMF[SomaFractalMemory]\n  end\n\n  Auth --&gt; SAH\n  OPA --&gt; SAH\n  Kafka --&gt; SA01\n  Kafka --&gt; SAH\n  Redis --&gt; SA01\n  Vault --&gt; SA01\n  Etcd --&gt; SA01\n  Prom --&gt; Apps\n</code></pre>"},{"location":"technical-manual/architecture/#10-verification-checklist","title":"10. Verification Checklist","text":"<ul> <li>[ ] Diagram renders via MkDocs and linted with <code>markdownlint</code>.</li> <li>[ ] Service matrix matches <code>docker-compose.yaml</code>.</li> <li>[ ] Helm values align with <code>infra/helm/soma-infra</code>.</li> </ul>"},{"location":"technical-manual/data-flow/","title":"Data Flow &amp; Persistence","text":"<p>This document explains how data enters, moves through, and leaves SomaAgent01. It covers chat payloads, tool execution artifacts, event streaming, and storage.</p>"},{"location":"technical-manual/data-flow/#1-high-level-flow","title":"1. High-Level Flow","text":"<pre><code>sequenceDiagram\n  participant User\n  participant UI\n  participant Gateway\n  participant ConversationWorker\n  participant Tools\n  participant Memory\n  participant Kafka\n\n  User-&gt;&gt;UI: Chat message\n  UI-&gt;&gt;Gateway: HTTP request\n  Gateway-&gt;&gt;ConversationWorker: gRPC task\n  ConversationWorker-&gt;&gt;Tools: Invoke (e.g., code execution)\n  Tools--&gt;&gt;ConversationWorker: Results, artifacts\n  ConversationWorker-&gt;&gt;Memory: Persist state (Qdrant/Redis)\n  ConversationWorker-&gt;&gt;Kafka: Publish events\n  ConversationWorker-&gt;&gt;Gateway: Response\n  Gateway-&gt;&gt;UI: Render reply\n</code></pre>"},{"location":"technical-manual/data-flow/#2-data-stores","title":"2. Data Stores","text":"Store Type Purpose Retention Redis In-memory Session state, rate limits 24 hours (dev), 7 days (prod) Qdrant / pgvector Vector DB Long-term semantic memory 90 days rolling Postgres SQL Audit logs, marketplace registry 180 days Object storage S3-compatible Backups, large artifacts 1 year"},{"location":"technical-manual/data-flow/#3-event-streams","title":"3. Event Streams","text":"<p>Topics defined in <code>schemas/kafka/</code>:</p> <ul> <li><code>conversation.events</code>: conversation lifecycle events (schema <code>conversation_event.avsc</code>).</li> <li><code>tool.execution</code>: request/response payloads for tool usage.</li> <li><code>config.updates</code>: broadcast configuration and feature flag changes.</li> </ul> <p>Producers and consumers:</p> Topic Producers Consumers <code>conversation.events</code> Gateway, Conversation Worker Analytics, audit service <code>tool.execution</code> Tool Executor Monitoring service <code>config.updates</code> Control plane All services subscribing to config bus"},{"location":"technical-manual/data-flow/#4-privacy-retention-controls","title":"4. Privacy &amp; Retention Controls","text":"<ul> <li>PII redaction occurs before events are published (see <code>common/middleware/redaction.py</code>).</li> <li>Backups encrypted and access logged.</li> <li>Data deletion requests processed via <code>scripts/data/erase_user_data.py</code>.</li> </ul>"},{"location":"technical-manual/data-flow/#5-verification","title":"5. Verification","text":"<ul> <li>CI validates Avro schemas via <code>tests/schemas/test_kafka_schemas.py</code>.</li> <li>Weekly job <code>scripts/probes/check_retention.py</code> ensures TTL policies match table configuration.</li> <li>Observability dashboards track topic lag and storage usage.</li> </ul>"},{"location":"technical-manual/data-flow/#6-change-management","title":"6. Change Management","text":"<ul> <li>Update this document when adding new stores or topics.</li> <li>Document schema updates in <code>docs/changelog.md</code> with SemVer increments.</li> <li>Coordinate with privacy team for changes affecting data retention.</li> </ul>"},{"location":"technical-manual/deployment/","title":"Deployment","text":""},{"location":"technical-manual/deployment/#environments","title":"Environments","text":"Environment Purpose Notes Local Dev Feature development, manual QA <code>make dev-up</code> Staging Pre-production validation Mirrors prod configuration, uses real providers Production Live users Hardened networking, autoscaling"},{"location":"technical-manual/deployment/#configuration-matrix","title":"Configuration Matrix","text":"Config Local Staging Production <code>GATEWAY_REQUIRE_AUTH</code> false true true <code>OPENAI_API_KEY</code> .env Secret manager Secret manager Kafka Docker compose Managed cluster Managed cluster Postgres Docker compose Managed instance Managed HA cluster"},{"location":"technical-manual/deployment/#build-pipeline","title":"Build Pipeline","text":"<ol> <li>Run tests locally (<code>pytest</code>, Playwright).</li> <li>Build images: <code>docker build -f Dockerfile.canonical -t somaagent01:latest .</code> or <code>docker compose -f docker-compose.yaml build</code>.</li> <li>Push to registry (tag with git SHA, semantic version).</li> <li>Deploy via Compose (staging) or Helm (production).</li> </ol>"},{"location":"technical-manual/deployment/#docker-compose-deployment-staging","title":"Docker Compose Deployment (Staging)","text":"<pre><code>git pull\ndocker compose -p somaagent01-staging --profile core --profile dev -f docker-compose.yaml up -d\n</code></pre> <ul> <li>Use <code>.env.staging</code> for environment-specific overrides.</li> <li>Confirm health: <code>docker compose ps</code>.</li> <li>Host ports default to the reserved range <code>20000-20199</code> (Kafka 20000, Redis 20001, Postgres 20002, Gateway 20016, UI 20015). Override via <code>PORT_POOL_START</code> / <code>PORT_POOL_MAX</code> if the range is occupied.</li> <li>SomaBrain integration expects <code>http://host.docker.internal:9696</code>; ensure your local SomaBrain or SKM service is listening on that port (set via <code>SOMA_BASE_URL</code> and <code>SKM_BASE_URL</code>).</li> </ul>"},{"location":"technical-manual/deployment/#kubernetes-deployment-planned","title":"Kubernetes Deployment (Planned)","text":"<ul> <li>Helm chart (<code>deploy/helm/somaagent01</code>) will manage:<ul> <li>StatefulSets for Postgres/Kafka/Redis</li> <li>Deployments for Gateway, UI, Tool Executor</li> <li>ConfigMaps for prompts, settings defaults</li> <li>Secrets for API keys, credentials</li> </ul> </li> <li>Ingress exposes Gateway + UI via HTTPS.</li> </ul>"},{"location":"technical-manual/deployment/#rolling-update-procedure","title":"Rolling Update Procedure","text":"<ol> <li>Scale Gateway to zero traffic (if load balancer supports draining).</li> <li>Apply new build (<code>docker compose up -d gateway</code> or <code>helm upgrade</code>).</li> <li>Monitor health checks, metrics, logs.</li> <li>Re-enable traffic.</li> <li>Run smoke tests.</li> </ol>"},{"location":"technical-manual/deployment/#rollback","title":"Rollback","text":"<ul> <li>Docker: <code>docker compose up -d gateway=&lt;previous-tag&gt;</code>.</li> <li>Helm: <code>helm rollback somaagent01 &lt;revision&gt;</code>.</li> <li>Ensure database migrations are backward compatible or have rollback scripts.</li> </ul>"},{"location":"technical-manual/deployment/#environment-promotion-checklist","title":"Environment Promotion Checklist","text":"<ul> <li>[ ] Tests green (unit, integration, E2E).</li> <li>[ ] Release notes updated.</li> <li>[ ] Config parity reviewed (feature flags, API keys).</li> <li>[ ] Observability dashboards verified.</li> <li>[ ] Incident response contacts updated.</li> </ul>"},{"location":"technical-manual/deployment/#secrets-management","title":"Secrets Management","text":"<ul> <li>Local: <code>.env</code> (never commit), <code>python/helpers/secrets.py</code> loads.</li> <li>Staging/Prod: managed secrets (Vault, AWS Secrets Manager). Mount or inject as env vars.</li> </ul>"},{"location":"technical-manual/deployment/#compliance-audit","title":"Compliance &amp; Audit","text":"<ul> <li>Record deployment metadata in <code>docs/changelog.md</code>.</li> <li>Tag git release (<code>git tag vX.Y.Z</code>).</li> <li>Store build artifacts and configuration in artifact repository.</li> </ul>"},{"location":"technical-manual/infrastructure/","title":"Infrastructure &amp; Deployment Blueprint","text":"<p>This blueprint documents how SomaAgent01 is provisioned across local, staging, and production environments. It covers Docker Compose profiles, Helm chart structure, configuration management, and verification routines.</p>"},{"location":"technical-manual/infrastructure/#1-local-environment-docker-compose","title":"1. Local Environment (Docker Compose)","text":"<p>Compose file: <code>docker-compose.yaml</code></p>"},{"location":"technical-manual/infrastructure/#profiles","title":"Profiles","text":"Profile Services Purpose <code>core</code> kafka, postgres, redis, opa Shared infrastructure required by the agent stack <code>dev</code> gateway, conversation-worker, tool-executor, memory-service, agent-ui Application services for local development"},{"location":"technical-manual/infrastructure/#bring-up-command","title":"Bring-Up Command","text":"<pre><code>docker compose -p somaagent01 --profile core --profile dev -f docker-compose.yaml up -d --build\n</code></pre> <p>Verification: - <code>docker compose -p somaagent01 ps</code> shows containers healthy. - <code>curl http://localhost:${GATEWAY_PORT:-20016}/health</code> returns <code>200</code>.</p>"},{"location":"technical-manual/infrastructure/#2-cluster-deployments-helm","title":"2. Cluster Deployments (Helm)","text":"<p>Charts live under <code>infra/helm/</code>.</p> <ul> <li><code>soma-infra/</code>: shared infrastructure (Auth, OPA, Kafka, Redis, Prometheus, Vault, Etcd).</li> <li><code>soma-stack/</code>: application bundle (gateway, conversation worker, memory service, UI, tool executor).</li> </ul>"},{"location":"technical-manual/infrastructure/#install-flow","title":"Install Flow","text":"<pre><code># Bootstrap Kind cluster for validation\nkind create cluster --name soma\n\n# Install shared infra\ntarget=dev\nhelm upgrade --install soma-infra infra/helm/soma-infra \\\n  -n soma-$target --create-namespace \\\n  -f infra/helm/values-$target.yaml\n\n# Install application stack\nhelm upgrade --install soma-stack infra/helm/soma-stack \\\n  -n soma-$target \\\n  -f infra/helm/values-$target.yaml\n</code></pre> <p>Verification: - <code>kubectl get pods -n soma-dev</code> shows all pods <code>Running</code>. - Port-forward gateway (<code>kubectl port-forward svc/gateway 8010:8010</code>) and hit <code>/health</code>. - Run smoke tests: <code>poetry run python scripts/smoke_test.py --env dev</code>.</p>"},{"location":"technical-manual/infrastructure/#3-configuration-management","title":"3. Configuration Management","text":"<ul> <li>Base settings: <code>common/config/settings.py</code> (Pydantic models).</li> <li>Environment overrides: <code>infra/helm/values-&lt;env&gt;.yaml</code>.</li> <li>Secrets: Stored in Vault; templated via Helm and injected using Vault Agent sidecars.</li> <li>Feature flags: Sourced from Etcd (<code>feature_flag_endpoint</code>), cached in Redis, with updates broadcast over the <code>config.updates</code> Kafka topic.</li> </ul>"},{"location":"technical-manual/infrastructure/#4-cicd-integration","title":"4. CI/CD Integration","text":"<p>GitHub Actions workflow: <code>.github/workflows/ci.yml</code> (existing) + <code>docs-quality.yml</code> (added in this sprint).</p> <p>Pipeline stages: 1. Lint Python (<code>ruff</code>, <code>mypy</code>). 2. Run unit and integration tests (<code>pytest</code>). 3. Provision Kind cluster, install <code>soma-infra</code> and <code>soma-stack</code> charts. 4. Execute smoke tests and publish artifacts. 5. Trigger documentation workflow (link checking, markdown lint, MkDocs build).</p>"},{"location":"technical-manual/infrastructure/#5-change-management","title":"5. Change Management","text":"<ul> <li>Infrastructure changes require entries in <code>docs/changelog.md</code>.</li> <li>Update Helm chart versions in <code>Chart.yaml</code> and <code>values-*.yaml</code>.</li> <li>Tag releases following <code>v&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code> and attach Helm package artifacts.</li> </ul>"},{"location":"technical-manual/infrastructure/#6-disaster-recovery","title":"6. Disaster Recovery","text":"<ul> <li>Backups:</li> <li>State stores (Redis, Kafka) rely on cloud snapshots (documented in <code>infra/helm/soma-infra/backup/</code>).</li> <li>Qdrant backups stored in object storage with lifecycle policies.</li> <li>Failover: Cloudflare Load Balancer or Route53 handles region traffic shifts.</li> <li>RPO/RTO: Target RPO 15 minutes, RTO 60 minutes. Validate quarterly via failover drills.</li> </ul>"},{"location":"technical-manual/infrastructure/#7-operational-runbooks","title":"7. Operational Runbooks","text":"<p>Runbooks relocate to the Development Manual (<code>../development-manual/runbooks.md</code>) but referenced here for completeness:</p> <ul> <li>Start/stop sequences</li> <li>Log collection</li> <li>Scaling events</li> </ul>"},{"location":"technical-manual/infrastructure/#8-verification-checklist","title":"8. Verification Checklist","text":"<ul> <li>[ ] Compose stack validated locally.</li> <li>[ ] Helm deployment validated in Kind.</li> <li>[ ] Vault and OPA sidecars injected successfully.</li> <li>[ ] Smoke tests green.</li> <li>[ ] Documentation updated and linted.</li> </ul>"},{"location":"technical-manual/integrations/","title":"Integrations &amp; Connectivity","text":"<p>This guide documents the upstream and downstream systems that SomaAgent01 connects to, including APIs, protocols, authentication mechanisms, and validation routines.</p>"},{"location":"technical-manual/integrations/#1-managed-soma-slm-api","title":"1. Managed Soma SLM API","text":"<ul> <li>Endpoint: <code>https://slm.somaagent01.dev/v1</code></li> <li>Auth: Bearer tokens stored as <code>SLM_API_KEY</code>.</li> <li>Usage: chat, utility, embedding models.</li> <li>Verification: Run <code>scripts/probes/check_slm.py</code> to validate latency and model availability.</li> </ul>"},{"location":"technical-manual/integrations/#2-open-policy-agent-opa","title":"2. Open Policy Agent (OPA)","text":"<ul> <li>Endpoint: <code>http://opa.soma.svc.cluster.local:8181</code>.</li> <li>Policy bundles: <code>policy/bundles/somaagent01.tar.gz</code>.</li> <li>Decision path: <code>/v1/data/http/authz/allow</code>.</li> <li>Deployment: Sidecar or standalone service depending on environment.</li> <li>Verification: CI runs <code>scripts/probes/check_opa.py --policy policy/bundles/somaagent01</code>. Deny-by-default enforced.</li> </ul>"},{"location":"technical-manual/integrations/#3-auth-service","title":"3. Auth Service","text":"<ul> <li>Endpoint: <code>http://auth.soma.svc.cluster.local:8080</code>.</li> <li>Protocol: OAuth 2.0 compatible; JWT tokens minted for UI and gateway.</li> <li>Key management: Vault-backed signing keys rotated quarterly.</li> <li>Verification: Integration tests ensure token validation in gateway middleware.</li> </ul>"},{"location":"technical-manual/integrations/#4-data-plane-integrations","title":"4. Data Plane Integrations","text":"System Protocol Purpose Notes Kafka (<code>kafka.soma.svc.cluster.local:9092</code>) TCP Event streaming for tasks, config updates Topics defined in <code>schemas/kafka/</code> Redis (<code>redis.soma.svc.cluster.local:6379</code>) TCP Caching, rate limiting, session store TLS optional; configure in <code>settings.redis_tls_enabled</code> Qdrant (<code>qdrant.soma.svc.cluster.local:6333</code>) HTTP/gRPC Vector store for memory retrieval Optional profile in compose Postgres (<code>postgres.soma.svc.cluster.local:5432</code>) TCP Persistence for audit logs and registry Migrations in <code>infra/db/migrations</code>"},{"location":"technical-manual/integrations/#5-external-tool-integrations","title":"5. External Tool Integrations","text":"<ul> <li>Cloudflare Tunnel: Automates secure external access. Configure via <code>.env</code> (<code>CLOUDFLARE_TOKEN</code>, <code>CLOUDFLARE_TUNNEL_ID</code>).</li> <li>SearXNG: Search engine for <code>search_engine</code> tool; configure endpoint in <code>common/config/settings.py</code>.</li> <li>Document Query Tool: Connects to vector index; ensure <code>DOCUMENT_QUERY_URL</code> is reachable.</li> </ul>"},{"location":"technical-manual/integrations/#6-diagram-of-integration-points","title":"6. Diagram of Integration Points","text":"<pre><code>digraph Integrations {\n  rankdir=LR\n  UI -&gt; Gateway [label=\"HTTP\"]\n  Gateway -&gt; SLM [label=\"HTTPS\", color=\"green\"]\n  Gateway -&gt; Auth [label=\"OAuth\"]\n  Gateway -&gt; OPA [label=\"Policy\"]\n  ConversationWorker -&gt; Kafka [label=\"Produce/Consume\"]\n  ConversationWorker -&gt; Redis [label=\"Cache\"]\n  ConversationWorker -&gt; Qdrant [label=\"Vector search\"]\n  ToolExecutor -&gt; DockerDaemon [label=\"gRPC\"]\n  ToolExecutor -&gt; ExternalAPIs [label=\"HTTPS\"]\n}\n</code></pre>"},{"location":"technical-manual/integrations/#7-validation-monitoring","title":"7. Validation &amp; Monitoring","text":"<ul> <li>Integration health endpoints checked by CI and runtime cron jobs.</li> <li>Alerts configured for latency, failure rate, and auth errors (see <code>infra/observability/alerts.yml</code>).</li> <li>Logs tagged with <code>integration</code> key for searchability.</li> </ul>"},{"location":"technical-manual/integrations/#8-change-management","title":"8. Change Management","text":"<ul> <li>Update <code>docs/changelog.md</code> for new endpoints or credential rotations.</li> <li>Security review required for any new external dependency.</li> <li>Add regression tests under <code>tests/integration/</code> when adding or modifying integrations.</li> </ul>"},{"location":"technical-manual/monitoring/","title":"Monitoring &amp; Health","text":""},{"location":"technical-manual/monitoring/#metrics","title":"Metrics","text":"<ul> <li>Prometheus collects component metrics.</li> <li>Exporters:</li> <li>Gateway: request latency, error count, circuit-breaker stats.</li> <li>Kafka: broker health, partition ISR, consumer lag.</li> <li>Postgres: connection pool, slow queries (pg exporter).</li> <li>Redis: memory usage, hits/misses.</li> </ul>"},{"location":"technical-manual/monitoring/#key-dashboards","title":"Key Dashboards","text":"Dashboard Metrics Gateway Overview RPS, latency percentiles, error codes Tool Executor Queue depth, execution duration Infrastructure CPU/memory per container, disk usage"},{"location":"technical-manual/monitoring/#logging","title":"Logging","text":"<ul> <li>Docker stdout/stderr aggregated with <code>docker logs</code>.</li> <li>For advanced setups, forward to Loki/ELK. Use JSON logs.</li> </ul>"},{"location":"technical-manual/monitoring/#tracing","title":"Tracing","text":"<ul> <li>Enable OpenTelemetry via <code>OTEL_EXPORTER_OTLP_ENDPOINT</code>.</li> <li>Instrument Gateway routes and Tool Executor tasks.</li> </ul>"},{"location":"technical-manual/monitoring/#alerting","title":"Alerting","text":"Alert Condition Action High Gateway latency p95 &gt; 3s for 5 min Investigate provider, Redis Tool queue backlog <code>tool.requests</code> lag &gt; 500 Scale executors or inspect stuck jobs Kafka ISR shrink &lt; partitions replicating Restart broker"},{"location":"technical-manual/monitoring/#synthetic-monitoring","title":"Synthetic Monitoring","text":"<ul> <li>Schedule periodic <code>/v1/health</code> checks.</li> <li>Run automated chat scenario periodically to validate end-to-end.</li> </ul>"},{"location":"technical-manual/monitoring/#incident-response","title":"Incident Response","text":"<ul> <li>Document incidents in <code>docs/operations/incidents/YYYY-MM-DD.md</code>.</li> <li>Include timeline, root cause, remediation, follow-ups.</li> </ul>"},{"location":"technical-manual/security/","title":"Security &amp; Compliance Baseline","text":"<p>This document defines the authentication, authorization, secrets, and compliance expectations for SomaAgent01. It aligns with Soma's SOC2 roadmap and internal control framework.</p>"},{"location":"technical-manual/security/#1-authentication","title":"1. Authentication","text":"<ul> <li>User-facing UI: Basic auth configurable in Settings \u2192 Authentication. Enforce strong passwords and rotate quarterly.</li> <li>Service-to-service: JWT tokens issued by the Auth service. Tokens validated by gateway middleware and OPA policies.</li> <li>CLI/API clients: Support personal access tokens derived from the Auth service.</li> </ul>"},{"location":"technical-manual/security/#2-authorization","title":"2. Authorization","text":"<ul> <li>OPA policies stored in <code>policy/</code> and distributed via bundles.</li> <li>Default stance: deny unless policy grants access.</li> <li>Policies include:</li> <li>Route-based access controls.</li> <li>Tool execution scopes.</li> <li>Audit log retention rules.</li> </ul>"},{"location":"technical-manual/security/#3-secrets-management","title":"3. Secrets Management","text":"<ul> <li>Vault stores API keys, database credentials, and signing keys.</li> <li>Helm charts inject secrets using Vault Agent sidecars.</li> <li>Local development uses <code>.env</code>; never commit secrets to version control.</li> <li>Rotation cadence: 90 days for API keys, 180 days for signing keys.</li> </ul>"},{"location":"technical-manual/security/#4-data-protection","title":"4. Data Protection","text":"<ul> <li>Data in transit: TLS enforced for external endpoints; mTLS configurable between services.</li> <li>Data at rest:</li> <li>Redis backed by encrypted volumes in production.</li> <li>Kafka topics using disk encryption on managed clusters.</li> <li>Qdrant snapshots stored in encrypted object storage.</li> <li>Backups: Stored encrypted, with access limited to SRE.</li> </ul>"},{"location":"technical-manual/security/#5-logging-monitoring","title":"5. Logging &amp; Monitoring","text":"<ul> <li>Audit logs emitted for authentication events, policy decisions, and tool executions.</li> <li>Logs shipped to Loki with retention policy of 30 days (dev) and 180 days (prod).</li> <li>Alert thresholds defined in <code>infra/observability/alerts.yml</code>.</li> </ul>"},{"location":"technical-manual/security/#6-vulnerability-management","title":"6. Vulnerability Management","text":"<ul> <li>Container image scans via Trivy integrated into CI.</li> <li>Dependency scans for Python (<code>pip-audit</code>) and Node (<code>npm audit</code>) run weekly.</li> <li>Critical CVEs trigger immediate patch cycle; log details in <code>docs/changelog.md</code>.</li> </ul>"},{"location":"technical-manual/security/#7-compliance-mapping","title":"7. Compliance Mapping","text":"Control Implementation SOC2 CC6.1 (Logical Access) Auth + OPA policy enforcement SOC2 CC7.2 (Change Management) GitHub PR reviews + CI workflows SOC2 CC8.1 (System Operations) Observability stack, alerts, runbooks SOC2 CC9.2 (Risk Mitigation) Vulnerability scans + patch policy"},{"location":"technical-manual/security/#8-incident-response","title":"8. Incident Response","text":"<ol> <li>Detect via alerts or reports.</li> <li>Create incident ticket with severity and impact.</li> <li>Contain (revoke keys, scale down services).</li> <li>Eradicate (patch, redeploy).</li> <li>Recover (validate health, inform stakeholders).</li> <li>Post-incident review within 5 business days; capture actions in change log.</li> </ol>"},{"location":"technical-manual/security/#9-verification-checklist","title":"9. Verification Checklist","text":"<ul> <li>[ ] Vault tokens rotated.</li> <li>[ ] Auth service keys rotated.</li> <li>[ ] Policy bundles validated with <code>opa test</code>.</li> <li>[ ] Trivy scans clear of critical CVEs.</li> <li>[ ] Incident response drills executed within SLA.</li> </ul>"},{"location":"technical-manual/components/conversation-worker/","title":"Conversation Worker","text":"<p>title: Conversation Worker slug: technical-conversation-worker version: 1.0.0 last-reviewed: 2025-10-15 audience: platform-engineers, runtime developers owner: platform-architecture reviewers:   - infra   - product prerequisites:   - Kafka topics provisioned   - Postgres and Redis reachable verification:   - <code>pytest tests/rate_limiter_test.py</code> passes   - Kafka consumer lag under 100 messages during load test</p>"},{"location":"technical-manual/components/conversation-worker/#conversation-worker","title":"Conversation Worker","text":""},{"location":"technical-manual/components/conversation-worker/#mission","title":"Mission","text":"<p>Process conversation tasks emitted by the Gateway, orchestrate tool execution, and persist responses back to the timeline while respecting rate limits and extension hooks.</p> <pre><code>graph TD\n    Gateway --&gt;|Kafka: conversation.tasks| Worker\n    Worker --&gt;|hydrate| AgentContext\n    Worker --&gt;|call| LLM[Chat Model]\n    Worker --&gt;|invoke| Tools\n    Tools --&gt;|results| Worker\n    Worker --&gt;|persist| Postgres\n    Worker --&gt;|emit| Kafka[conversation.events]\n    Worker --&gt;|update| Memory[SomaBrain]\n</code></pre>"},{"location":"technical-manual/components/conversation-worker/#module-layout","title":"Module Layout","text":"Module Description <code>services/conversation_worker/main.py</code> Async consumer loop, task deserialization, health probes <code>agent.py</code> Core monologue loop, extensions, agent context management <code>python/helpers/rate_limiter.py</code> Sliding-window limiter for requests and token budgets <code>python/helpers/settings.py</code> Provider configuration, tenant overrides <code>python/helpers/extension.py</code> Lifecycle hooks invoked around the loop"},{"location":"technical-manual/components/conversation-worker/#message-loop-lifecycle","title":"Message Loop Lifecycle","text":"<pre><code>graph TD\n    A[Receive UserMessage] --&gt; B[hist_add_user_message]\n    B --&gt; C[prepare_prompt]\n    C --&gt; D[call_chat_model]\n    D --&gt; E{Response contains tool request?}\n    E -- Yes --&gt; F[process_tools]\n    F --&gt; G[Tool execution &amp; result handling]\n    G --&gt; H[Add AI response to history]\n    E -- No --&gt; H\n    H --&gt; I[Extensions: response_stream_end]\n    I --&gt; J[Check for Intervention]\n    J --&gt;|Continue| A\n    J --&gt;|Pause| K[Wait while paused]\n    K --&gt; J\n</code></pre> <pre><code>stateDiagram-v2\n    [*] --&gt; Idle\n    Idle --&gt; Running : receive user message\n    Running --&gt; Waiting : awaiting LLM stream\n    Waiting --&gt; ToolCall : tool request detected\n    ToolCall --&gt; Running : tool result injected\n    Running --&gt; Idle : response sent to user\n    Running --&gt; Error : unhandled exception\n    Error --&gt; Idle : reset after logging\n</code></pre>"},{"location":"technical-manual/components/conversation-worker/#rate-limiting","title":"Rate Limiting","text":"<ul> <li><code>RateLimiter</code> tracks configurable counters (<code>*_rl_requests</code>, <code>*_rl_input</code>, <code>*_rl_output</code>).</li> <li>Before each model invocation the worker calls <code>allow</code>/<code>wait</code> ensuring budgets are respected.</li> <li>Breaches trigger progress updates surfaced through <code>AgentContext.log.set_progress</code> so UI clients show a waiting bar.</li> <li>Limits configurable per model family via <code>python/helpers/settings.py</code> and tenant overrides.</li> </ul>"},{"location":"technical-manual/components/conversation-worker/#extension-hooks","title":"Extension Hooks","text":"Hook Purpose <code>monologue_start</code> Observe loop start with inbound payload <code>before_main_llm_call</code> Mutate prompts or settings before provider invocation <code>tool_execute_before</code> / <code>tool_execute_after</code> Wrap tool execution for auditing <code>response_stream_chunk</code> Stream tokens to downstream observers <code>monologue_end</code> Cleanup and finalize transcripts <p>Extensions receive the shared <code>loop_data</code> object, allowing feature teams to add observers without touching core logic.</p>"},{"location":"technical-manual/components/conversation-worker/#configuration","title":"Configuration","text":"<ul> <li>Environment toggles (sample): <code>CONVERSATION_MAX_TOKENS</code>, <code>CONVERSATION_RETRY_LIMIT</code>.</li> <li>Kafka topics: <code>conversation.tasks</code> (consume), <code>conversation.events</code> (produce).</li> <li>Dependencies resolved via <code>python/helpers/settings.py</code> (LLM provider, tool registry, memory adapters).</li> </ul>"},{"location":"technical-manual/components/conversation-worker/#observability","title":"Observability","text":"<ul> <li>Metrics: message throughput, tool latency, retry counts (<code>/metrics</code> endpoint when <code>PROMETHEUS_ENABLE=1</code>).</li> <li>Logs: structured JSON with <code>conversation_id</code>, <code>task_id</code>, <code>tenant_id</code>.</li> <li>Traces: optional OTEL spans around LLM calls and tool execution if exporter configured.</li> </ul>"},{"location":"technical-manual/components/conversation-worker/#verification-checklist","title":"Verification Checklist","text":"<ul> <li>[ ] Run <code>pytest tests/rate_limiter_test.py</code> to confirm loop throttling.</li> <li>[ ] Kafka lag &lt; 100 for <code>conversation.tasks</code> under standard load test.</li> <li>[ ] Tool invocation breadcrumbs visible in logs and metrics.</li> </ul>"},{"location":"technical-manual/components/gateway/","title":"Gateway Component","text":""},{"location":"technical-manual/components/gateway/#purpose","title":"Purpose","text":"<ul> <li>Serves as the primary ingress for HTTP/WebSocket traffic (humans, agents, automations).</li> <li>Enforces authentication, authorization, and policy controls before delegating to LLMs or tools.</li> <li>Orchestrates conversation flow: context assembly, tool invocation, memory persistence.</li> </ul> <pre><code>graph LR\n    Client --&gt;|REST/WS| Gateway\n    Gateway --&gt;|authorize| OpenFGA\n    Gateway --&gt;|evaluate| OPA\n    Gateway --&gt;|fetch| SomaBrain\n    Gateway --&gt;|call| LLMProvider\n    Gateway --&gt;|publish| Kafka\n    Gateway --&gt;|persist| Postgres\n    Gateway --&gt;|cache| Redis\n</code></pre>"},{"location":"technical-manual/components/gateway/#module-structure","title":"Module Structure","text":"Module Key Responsibilities <code>services/gateway/main.py</code> FastAPI app, endpoints, metrics, SSE/WS, capsule proxy <code>services/gateway/auth/openfga.py</code> Relationship tuples, access checks <code>services/gateway/policies/opa_client.py</code> Rego policy evaluation <code>services/gateway/memory/service.py</code> SomaBrain reads/writes <code>services/gateway/tasks/publisher.py</code> Kafka publishing helpers"},{"location":"technical-manual/components/gateway/#request-lifecycle","title":"Request Lifecycle","text":"<ol> <li>Ingress: Request hits FastAPI dependency stack (auth, tenant resolution).</li> <li>Policy: OpenFGA checks relationship tuples; OPA enforces budgets/quotas.</li> <li>Context: Gateway fetches session transcript, memories, tenant defaults.</li> <li>LLM Call: Provider info comes from <code>python/helpers/settings.py</code> and LiteLLM wrapper.</li> <li>Tooling: Responses containing tool directives emit Kafka messages or call tool executor.</li> <li>Persistence: Updated session state stored in Postgres; new memories saved to SomaBrain.</li> <li>Streaming: WebSocket clients receive partial responses and status events.</li> </ol>"},{"location":"technical-manual/components/gateway/#configuration","title":"Configuration","text":"<ul> <li><code>GATEWAY_REQUIRE_AUTH</code>, <code>POSTGRES_DSN</code>, <code>KAFKA_BOOTSTRAP_SERVERS</code>, <code>OPENFGA_*</code>.</li> <li>Settings API merges defaults from <code>python/helpers/settings.py</code> with user overrides.</li> <li><code>dev</code> profile enables auto-reload and verbose logging.</li> </ul>"},{"location":"technical-manual/components/gateway/#observability","title":"Observability","text":"<ul> <li>Metrics: request latency, response codes, circuit breaker counters at <code>/metrics</code>.</li> <li>Logs: structured JSON per request.</li> <li>Traces: optional OTEL instrumentation via environment variables.</li> </ul>"},{"location":"technical-manual/components/gateway/#failure-modes-mitigations","title":"Failure Modes &amp; Mitigations","text":"Failure Symptom Mitigation Redis unavailable Rate limit errors, cache misses Gateway falls back to Postgres fetches; retries with backoff LLM provider errors 5xx streaming to UI Circuit breaker triggers; Gateway surfaces actionable message Kafka publish failure Tool executions stall Dead-letter queue records message; operator restarts broker OpenFGA connectivity 403 responses for all requests Cached decisions used briefly; escalate to SRE"},{"location":"technical-manual/components/gateway/#extensibility","title":"Extensibility","text":"<ul> <li>Add routers under <code>services/gateway/routes/</code> and include via FastAPI.</li> <li>Define new tool schemas in <code>python/tools/schema/</code> and map to executor tasks.</li> <li>Update <code>conf/tenants.yaml</code> for tenant-specific budgets or prompts.</li> </ul>"},{"location":"technical-manual/components/gateway/#public-endpoints","title":"Public Endpoints","text":"<ul> <li>POST <code>/v1/session/message</code></li> <li>POST <code>/v1/session/action</code></li> <li>GET <code>/v1/session/{session_id}/events</code> (SSE)</li> <li>WS <code>/v1/session/{session_id}/stream</code></li> <li>GET <code>/v1/health</code> (also <code>/health</code> alias, hidden from schema)</li> <li>API keys: POST <code>/v1/keys</code>, GET <code>/v1/keys</code>, DELETE <code>/v1/keys/{key_id}</code></li> <li>Model profiles: GET/POST/PUT/DELETE under <code>/v1/model-profiles</code></li> <li>Routing: POST <code>/v1/route</code></li> <li>Requeue: GET <code>/v1/requeue</code>, POST <code>/v1/requeue/{id}/resolve</code>, DELETE <code>/v1/requeue/{id}</code></li> <li>Capsules proxy: GET <code>/v1/capsules</code>, GET <code>/v1/capsules/{id}</code>, POST <code>/v1/capsules/{id}/install</code></li> </ul> <p>Nonexistent (do not document under gateway): <code>/chat</code>, <code>/settings_get</code>, <code>/settings_set</code>, <code>/realtime_session</code>.</p>"},{"location":"technical-manual/components/gateway/#verification-checklist","title":"Verification Checklist","text":"<ul> <li>[ ] <code>curl http://localhost:8010/health</code> returns 200.</li> <li>[ ] Integration suite passes.</li> <li>[ ] Prometheus shows Gateway targets UP.</li> </ul>"},{"location":"technical-manual/components/mcp-proxy/","title":"MCP & A2A Proxy","text":"<p>title: MCP &amp; A2A Proxy slug: technical-mcp-proxy version: 1.0.0 last-reviewed: 2025-10-15 audience: platform-engineers, integrations owner: platform-architecture reviewers:   - connectivity   - security prerequisites:   - MCP/A2A credentials provisioned in Vault   - Gateway configured with proxy endpoints verification:   - <code>pytest tests/test_fasta2a_client.py</code> passes   - Unauthorized requests receive HTTP 401</p>"},{"location":"technical-manual/components/mcp-proxy/#mcp-a2a-proxy","title":"MCP &amp; A2A Proxy","text":""},{"location":"technical-manual/components/mcp-proxy/#mission","title":"Mission","text":"<p>Expose Model-Context-Protocol (MCP) and Agent-to-Agent (A2A) capabilities through a thin proxy that reuses gateway authentication, keeps secrets server-side, and forwards only validated requests to downstream services.</p> <pre><code>sequenceDiagram\n    participant C as Client Agent\n    participant P as Proxy (MCP/A2A)\n    participant S as Target Service\n    participant DB as Postgres\n    participant T as Token Store\n\n    C-&gt;&gt;P: HTTP request + Authorization header\n    P-&gt;&gt;T: validate token (create_auth_token)\n    alt token valid\n        P-&gt;&gt;S: forward request (SSE/HTTP)\n        S-&gt;&gt;DB: optional lookup\n        S--&gt;&gt;P: response payload\n        P--&gt;&gt;C: stream / JSON response\n    else token invalid\n        P--&gt;&gt;C: 401 Unauthorized\n    end\n</code></pre>"},{"location":"technical-manual/components/mcp-proxy/#implementation-highlights","title":"Implementation Highlights","text":"<ul> <li>Entry points live in <code>python/helpers/mcp_handler.py</code> and <code>python/helpers/fasta2a_server.py</code>.</li> <li><code>DynamicMcpProxy</code> and <code>DynamicA2AProxy</code> reload provider definitions at runtime, enabling tenants to register servers without restarts.</li> <li>Tokens combine runtime IDs with optional operator credentials (<code>create_auth_token</code>).</li> <li>Forwarded requests inherit gateway tracing headers so observability spans remain stitched.</li> </ul>"},{"location":"technical-manual/components/mcp-proxy/#configuration","title":"Configuration","text":"<ul> <li>Tenants register MCP endpoints under <code>conf/tenants.yaml</code> (<code>mcp.endpoints</code>, <code>a2a.endpoints</code>).</li> <li>Secrets resolved from Vault via <code>python/helpers/secrets.py</code> to avoid leaking keys to clients.</li> <li>Toggle availability through <code>settings.mcp_enabled</code> and <code>settings.a2a_enabled</code> per tenant.</li> </ul>"},{"location":"technical-manual/components/mcp-proxy/#security-considerations","title":"Security Considerations","text":"<ul> <li>All traffic passes through the gateway FastAPI process; no direct exposure of downstream hosts.</li> <li>Tokens scoped per tenant and expire based on settings (<code>settings.mcp_token_ttl_seconds</code>).</li> <li>Proxy enforces allowlists for HTTP methods and maximum payload sizes.</li> </ul>"},{"location":"technical-manual/components/mcp-proxy/#verification-checklist","title":"Verification Checklist","text":"<ul> <li>[ ] <code>pytest tests/test_fasta2a_client.py</code> passes.</li> <li>[ ] Tenant configuration updates hot-reload without restart.</li> <li>[ ] Audit logs record proxy invocations with <code>mcp_proxy</code> or <code>a2a_proxy</code> labels.</li> </ul>"},{"location":"technical-manual/components/memory/","title":"SomaBrain Memory Subsystem","text":""},{"location":"technical-manual/components/memory/#role","title":"Role","text":"<p>Provide durable, queryable factual context so LLM agents operate with continuity and verifiable truths.</p> <pre><code>classDiagram\n    class MemoryItem {\n        string id\n        string key\n        string type\n        string tenant_id\n        string persona_id\n        datetime created_at\n        float relevance\n        dict payload\n    }\n\n    class MemoryStore {\n        +save(item: MemoryItem)\n        +load(key: str) MemoryItem\n        +search(query: MemoryQuery) list~MemoryItem~\n        +delete(id: str)\n    }\n\n    class MemoryQuery {\n        string key\n        string text\n        string type\n        float min_relevance\n        int limit\n    }\n\n    MemoryStore --&gt; MemoryItem\n    MemoryStore --&gt; MemoryQuery\n</code></pre> <ul> <li>Key: stable identifier (for example <code>user.preferences.format</code>).</li> <li>Type: schema namespace (<code>UserPreference</code>, <code>ProjectDecision</code>).</li> <li>Payload: JSON encoded data validated by Pydantic models.</li> </ul>"},{"location":"technical-manual/components/memory/#storage-layers","title":"Storage Layers","text":"Layer Technology Purpose Hot cache Redis Millisecond access to recent entries Durable store Postgres (<code>memory_items</code> table) Long-term persistence Indexing Optional Qdrant / embeddings Semantic search for fuzzy recall <p>Adapters under <code>python/helpers/memory/</code> keep the codebase provider-agnostic.</p>"},{"location":"technical-manual/components/memory/#api-surface","title":"API Surface","text":"<p>Two modes exist, selected by <code>SOMA_ENABLED</code> (default: true):</p> <ul> <li>Remote: SomaMemory via <code>python.integrations.soma_client</code> (production default)</li> <li>Local: FAISS-backed <code>Memory</code> adapter for development when SomaBrain is disabled</li> </ul> <p>Key methods (async):</p> <ul> <li><code>Memory.get(agent)</code> or <code>Memory.get_by_subdir(\"default\")</code></li> <li><code>insert_text(text, metadata)</code> / <code>insert_documents([Document(...)])</code></li> <li><code>search_similarity_threshold(query, limit, threshold, filter?)</code></li> <li><code>delete_documents_by_ids(ids)</code> / <code>delete_documents_by_query(query, threshold, filter)</code></li> </ul>"},{"location":"technical-manual/components/memory/#retrieval-workflow","title":"Retrieval Workflow","text":"<ol> <li>Gateway receives conversation request.</li> <li>Extracts tenant/persona identifiers.</li> <li>Runs <code>memory_search</code> per persona configuration (<code>conf/tenants.yaml</code>).</li> <li>Injects selected memories into system prompt.</li> <li>After response, new facts summarized and written via <code>memory_save</code>.</li> </ol>"},{"location":"technical-manual/components/memory/#best-practices","title":"Best Practices","text":"<ul> <li>Store structured JSON (Pydantic models \u2192 dictionaries).</li> <li>Include metadata such as author, confidence, source, expiry.</li> <li>Keep entries concise (&lt;400 tokens) to avoid prompt overflow.</li> <li>Prune stale items via background jobs.</li> </ul>"},{"location":"technical-manual/components/memory/#machine-integration","title":"Machine Integration","text":"<pre><code>from python.helpers.memory import Memory\n\nmem = await Memory.get_by_subdir(\"default\")\ndoc_id = await mem.insert_text(\n  \"Backend decision: FastAPI\",\n  metadata={\"type\": \"ProjectDecision\", \"key\": \"project.decisions.backend\"},\n)\n\nrecent = await mem.search_similarity_threshold(\n  query=\"project decisions\",\n  limit=5,\n  threshold=0.3,\n)\n</code></pre>"},{"location":"technical-manual/components/memory/#failure-considerations","title":"Failure Considerations","text":"Issue Impact Mitigation Redis eviction First lookup slower (fallback to Postgres) Warm cache via background worker Postgres outage Memory writes fail Retry with backoff, surface warning Schema drift Payload parsing errors Version schemas, migrate data periodically"},{"location":"technical-manual/components/memory/#roadmap","title":"Roadmap","text":"<ul> <li>Embedder-backed semantic search (Qdrant).</li> <li>Tenant-level retention policies / GDPR hooks.</li> <li>Automated summarization when memory exceeds token budgets.</li> </ul>"},{"location":"technical-manual/components/outbox-sync/","title":"Outbox Sync Worker","text":"<p>Resilient, health-aware publishing from Postgres to Kafka using a transactional outbox.</p>"},{"location":"technical-manual/components/outbox-sync/#overview","title":"Overview","text":"<ul> <li>Write-path enqueues JSON payloads into <code>message_outbox</code> when Kafka is degraded or to guarantee durability.</li> <li>A background worker (<code>services/outbox_sync/main.py</code>) continuously claims pending rows, publishes to Kafka, and marks them <code>sent</code>.</li> <li>Retries use capped exponential backoff with deduplication via an optional <code>dedupe_key</code>.</li> </ul>"},{"location":"technical-manual/components/outbox-sync/#table-schema","title":"Table schema","text":"<ul> <li><code>topic TEXT</code> \u2013 Kafka topic to publish to</li> <li><code>payload JSONB</code> \u2013 full JSON event; trace context is injected at publish-time</li> <li><code>headers JSONB</code> \u2013 reserved for future use</li> <li><code>status TEXT</code> \u2013 <code>pending | sending | sent | failed</code></li> <li><code>retry_count INT</code>, <code>next_attempt_at TIMESTAMPTZ</code></li> <li><code>dedupe_key TEXT</code> \u2013 unique when not null</li> <li><code>session_id TEXT</code>, <code>tenant TEXT</code> \u2013 provenance hints</li> </ul> <p>The schema and trigger are created automatically by <code>ensure_schema()</code>.</p>"},{"location":"technical-manual/components/outbox-sync/#worker-behavior","title":"Worker behavior","text":"<ul> <li>Batch claim using <code>FOR UPDATE SKIP LOCKED</code></li> <li>Publish via <code>KafkaEventBus.publish(topic, payload)</code></li> <li>On success: <code>sent</code></li> <li>On failure: <code>pending</code> with <code>retry_count += 1</code> and <code>next_attempt_at = now + backoff</code></li> <li>After <code>OUTBOX_SYNC_MAX_RETRIES</code>, mark <code>failed</code></li> </ul>"},{"location":"technical-manual/components/outbox-sync/#configuration","title":"Configuration","text":"<ul> <li><code>OUTBOX_SYNC_BATCH_SIZE</code> (default 100)</li> <li><code>OUTBOX_SYNC_INTERVAL_SECONDS</code> (default 0.5)</li> <li><code>OUTBOX_SYNC_MAX_RETRIES</code> (default 8)</li> <li><code>OUTBOX_SYNC_BACKOFF_BASE_SECONDS</code> (default 1.0)</li> <li><code>OUTBOX_SYNC_BACKOFF_MAX_SECONDS</code> (default 60.0)</li> <li>Metrics: Prometheus on <code>OUTBOX_SYNC_METRICS_PORT</code> (default 9469)</li> </ul>"},{"location":"technical-manual/components/outbox-sync/#integration-notes","title":"Integration notes","text":"<ul> <li>Use <code>OutboxStore.enqueue()</code> in write paths as a fallback when <code>KafkaEventBus.healthcheck()</code> fails or as a standard durable write.</li> <li>For idempotency, set a stable <code>dedupe_key</code> (e.g., event ID); enqueues with the same key are no-ops.</li> <li>The worker is safe to run with multiple replicas.</li> </ul>"},{"location":"technical-manual/components/realtime-speech/","title":"Realtime Speech","text":"<p>title: Realtime Speech Pipeline slug: technical-realtime-speech version: 1.0.0 last-reviewed: 2025-10-15 audience: platform-engineers, frontend developers owner: platform-architecture reviewers:   - infra   - product prerequisites:   - Browser with microphone support   - Valid provider credentials (OpenAI realtime or equivalent) verification:   - <code>/realtime_session</code> returns a session payload   - WebRTC negotiation succeeds end-to-end</p>"},{"location":"technical-manual/components/realtime-speech/#realtime-speech-pipeline","title":"Realtime Speech Pipeline","text":"<p>Connects web clients to realtime speech models, enabling bidirectional audio streaming.</p> <pre><code>sequenceDiagram\n    participant UserMic as Browser Microphone\n    participant UI as Speech Store\n    participant Gateway as /realtime_session\n    participant Provider as Realtime API\n\n    UserMic-&gt;&gt;UI: Audio samples (MediaStream)\n    UI-&gt;&gt;Gateway: POST /realtime_session {model, voice, endpoint}\n    Gateway-&gt;&gt;Provider: Create session (server-side auth)\n    Provider--&gt;&gt;Gateway: Client secret, session metadata\n    Gateway--&gt;&gt;UI: Session payload (client_secret)\n    UI-&gt;&gt;Provider: WebRTC offer (with client secret)\n    Provider--&gt;&gt;UI: WebRTC answer + audio track\n    Provider--&gt;&gt;UserMic: Synthesized speech audio\n</code></pre>"},{"location":"technical-manual/components/realtime-speech/#components","title":"Components","text":"Component File(s) Description UI Speech Store <code>webui/components/chat/speech/speech-store.js</code> Manages microphone, WebRTC, audio playback Settings <code>webui/js/settings.js</code>, <code>/settings</code> endpoints Configure provider, voice, endpoint Gateway Endpoint <code>python/api/realtime_session.py</code> Creates provider session server-side Settings Backend <code>python/helpers/settings.py</code> Stores defaults and credentials"},{"location":"technical-manual/components/realtime-speech/#provider-defaults","title":"Provider Defaults","text":"<ul> <li>Provider: <code>openai_realtime</code></li> <li>Model: <code>gpt-4o-realtime-preview</code></li> <li>Voice: <code>verse</code></li> <li>Endpoint: <code>https://api.openai.com/v1/realtime/sessions</code></li> </ul>"},{"location":"technical-manual/components/realtime-speech/#security-compliance","title":"Security &amp; Compliance","text":"<ul> <li>Gateway authenticates with provider using server-side credentials stored in Vault.</li> <li>Client secret returned by provider lives only in memory on the browser.</li> <li>CORS restricted to trusted origins; WebRTC sessions scoped per tunnel.</li> </ul>"},{"location":"technical-manual/components/realtime-speech/#error-handling","title":"Error Handling","text":"Failure UI Behavior Operator Action Session creation fails Toast <code>Realtime session error</code> Validate API key, network egress WebRTC negotiation timeout UI retries Check browser permissions, system firewall Audio playback blocked Browser prompts for interaction User clicks to unlock audio"},{"location":"technical-manual/components/realtime-speech/#operational-metrics","title":"Operational Metrics","text":"<ul> <li>Gateway logs session creation time, error codes.</li> <li>UI logs WebRTC state transitions to the console for debugging.</li> <li>Roadmap: add Prometheus counters (<code>realtime_sessions_total</code>, <code>realtime_session_failures_total</code>).</li> </ul>"},{"location":"technical-manual/components/realtime-speech/#extending-providers","title":"Extending Providers","text":"<ol> <li>Extend settings schema with new provider option.</li> <li>Update Gateway <code>/realtime_session</code> to call provider-specific API.</li> <li>Adjust UI speech store for codec/auth constraints.</li> <li>Document usage in the User Manual once the provider is stable.</li> </ol>"},{"location":"technical-manual/components/tool-executor/","title":"Tool Executor","text":"<p>title: Tool Executor Component slug: technical-tool-executor version: 1.0.0 last-reviewed: 2025-10-15 audience: platform-engineers, automation teams owner: platform-architecture reviewers:   - infra   - security prerequisites:   - Kafka and Postgres reachable   - Gateway emitting tool calls verification:   - <code>pytest tests/unit/test_execution_engine_circuit.py</code> passes   - Metrics <code>tool_executor_tasks_total</code> increment during run</p>"},{"location":"technical-manual/components/tool-executor/#tool-executor-component","title":"Tool Executor Component","text":""},{"location":"technical-manual/components/tool-executor/#mission","title":"Mission","text":"<p>Execute tool calls emitted by the Gateway, ensuring sandboxed, observable, and auditable automation.</p> <pre><code>graph TD\n  Gateway --&gt;|Kafka: tool.requests| ToolWorker\n    ToolWorker --&gt; Sandbox\n    Sandbox --&gt;|stdout/stderr| LogAggregator\n    Sandbox --&gt;|result payload| ToolWorker\n  ToolWorker --&gt;|Kafka: tool.results| Gateway\n    ToolWorker --&gt;|Persist| Postgres\n    ToolWorker --&gt;|Artifacts| ObjectStore[(S3-compatible)]\n</code></pre>"},{"location":"technical-manual/components/tool-executor/#architecture-layers","title":"Architecture Layers","text":"Layer Description Transport Kafka consumer group (<code>tool-executor</code>) Execution Worker pool (<code>python/services/tool_executor/worker.py</code>) with asyncio concurrency Sandbox Ephemeral directories under <code>/tmp/tool-exec</code>, optional container isolation Persistence Result metadata in Postgres, large payloads in object storage, cache in Redis Telemetry Metrics on task duration, success rate, retries"},{"location":"technical-manual/components/tool-executor/#supported-tool-types","title":"Supported Tool Types","text":"Tool Module Notes Shell / Command <code>python/tools/shell.py</code> Runs in sandbox with resource limits Code Interpreter <code>python/tools/code.py</code> Executes Python snippets deterministically HTTP <code>python/tools/http.py</code> Makes HTTP(S) calls under allowlist policy Knowledge Base <code>python/tools/knowledge.py</code> Queries knowledge store Custom <code>python/tools/custom/*.py</code> Register via startup discovery"},{"location":"technical-manual/components/tool-executor/#configuration","title":"Configuration","text":"<ul> <li>Topics: <code>tool.requests</code> (input), <code>tool.results</code> (output). Overridable via <code>TOOL_REQUESTS_TOPIC</code>, <code>TOOL_RESULTS_TOPIC</code>.</li> <li>Environment: <code>TOOL_EXECUTOR_MAX_WORKERS</code>, <code>SANDBOX_ROOT</code>, <code>TIMEOUT_SECONDS</code>.</li> <li>Secrets resolved through <code>python/helpers/secrets.py</code> to redact logs.</li> </ul>"},{"location":"technical-manual/components/tool-executor/#callback-channels","title":"Callback channels","text":"<p>The executor communicates results exclusively via Kafka topics:</p> <ul> <li><code>tool.requests</code>: Gateway/Orchestrator \u279c Executor</li> <li><code>tool.results</code>: Executor \u279c Gateway/Orchestrator</li> </ul> <p>Messages use a shared envelope with <code>task_id</code>, <code>tool_name</code>, <code>payload</code>, and <code>metadata</code> fields. See Shared Resources \u2192 Event Streams for schemas.</p>"},{"location":"technical-manual/components/tool-executor/#error-handling","title":"Error Handling","text":"Scenario Response Tool timeout Worker aborts, marks job <code>failed</code>, publishes error Sandbox init failure Retry up to three times before dead-lettering Postgres unavailable Buffer results in Redis; operator restores DB Invalid payload schema Publish validation error back to Gateway"},{"location":"technical-manual/components/tool-executor/#observability","title":"Observability","text":"<ul> <li>Metrics: <code>tool_executor_tasks_total</code>, <code>tool_executor_duration_seconds</code>.</li> <li>Logs: structured per task with <code>task_id</code> correlation.</li> <li>Tracing: optional OpenTelemetry spans around sandbox execution.</li> </ul>"},{"location":"technical-manual/components/tool-executor/#circuit-breaker-safeguards","title":"Circuit Breaker Safeguards","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Closed : start\n    Closed --&gt; Open : failures &gt;= threshold\n    Open --&gt; Trial : reset_timeout elapsed\n    Trial --&gt; Closed : successful trial call\n    Trial --&gt; Open : trial fails\n    Open --&gt; Open : subsequent calls blocked\n</code></pre> <ul> <li>Implementation lives in <code>python/helpers/circuit_breaker.py</code> and wraps the execution engine.</li> <li>When the circuit is open, new tool requests raise <code>CircuitOpenError</code> and the Gateway retries or surfaces UI guidance.</li> <li>Metrics exported when <code>CIRCUIT_BREAKER_METRICS_PORT</code> is set:</li> <li><code>circuit_breaker_opened_total</code></li> <li><code>circuit_breaker_closed_total</code></li> <li><code>circuit_breaker_trial_total</code></li> </ul>"},{"location":"technical-manual/components/tool-executor/#verification-checklist","title":"Verification Checklist","text":"<ul> <li>[ ] Run <code>pytest tests/unit/test_execution_engine_circuit.py</code> to exercise success/failure paths.</li> <li>[ ] Confirm circuit breaker metrics emit via <code>/metrics</code> when failures are forced.</li> <li>[ ] Inspect sandbox directory cleanup under <code>/tmp/tool-exec</code> after load tests.</li> </ul>"},{"location":"technical-manual/components/tool-executor/#extending-the-executor","title":"Extending the Executor","text":"<ol> <li>Implement new tool under <code>python/tools/</code> adhering to base interface.</li> <li>Register in <code>python/tools/__init__.py</code> so discovery loads it.</li> <li>Provide JSON schema for input/output validation.</li> <li>Add integration tests ensuring Gateway contracts remain valid.</li> </ol>"},{"location":"technical-manual/components/tool-executor/#use-cases","title":"Use Cases","text":"<ul> <li>CI/CD agents executing migrations or test suites.</li> <li>Security scanners triggered by policy events.</li> <li>Realtime data fetchers hydrating chat context.</li> </ul> <p>Ensure long-running jobs emit progress updates so Gateway can stream status to users.</p>"},{"location":"technical-manual/components/ui/","title":"Agent UI Component","text":""},{"location":"technical-manual/components/ui/#mission","title":"Mission","text":"<p>Provide operators and automated clients with a realtime interface that mirrors Gateway capabilities while exposing hooks for testing and automation.</p> <pre><code>graph TD\n    Browser --&gt;|GET /| AgentUI\n    AgentUI --&gt;|fetch /settings_get| Gateway\n    AgentUI --&gt;|open WebSocket /chat| Gateway\n    AgentUI --&gt;|mount Alpine components| DOM\n    DOM --&gt;|user input| AgentUI\n    AgentUI --&gt;|send message| Gateway\n    Gateway --&gt;|stream tokens| AgentUI\n    AgentUI --&gt;|render transcript| Browser\n</code></pre>"},{"location":"technical-manual/components/ui/#technology-stack","title":"Technology Stack","text":"Layer Technology Bundler Vite (Docker build) Runtime Alpine.js + native ES modules Styling Tailwind CSS + custom utilities Transport WebSocket (chat stream), REST (settings/history)"},{"location":"technical-manual/components/ui/#module-map","title":"Module Map","text":"Path Role <code>webui/index.html</code> Shell document, layout, script bootstrap <code>webui/js/settings.js</code> Settings modal logic, persistence <code>webui/components/chat/log-store.js</code> Chat transcript state container <code>webui/components/chat/speech/speech-store.js</code> Microphone/WebRTC management <code>webui/components/settings/*</code> Modular settings panels"},{"location":"technical-manual/components/ui/#speech-experience","title":"Speech Experience","text":"<ul> <li>Defaults to OpenAI realtime provider (<code>speech_provider = \"openai_realtime\"</code>).</li> <li>Builds WebRTC sessions using secrets returned from Gateway <code>/realtime_session</code> endpoint.</li> <li>Falls back to browser TTS when realtime provider unavailable and surfaces toast notification.</li> </ul>"},{"location":"technical-manual/components/ui/#accessibility-ux","title":"Accessibility &amp; UX","text":"<ul> <li>Keyboard shortcuts for message send (<code>Cmd+Enter</code>) and focus recovery.</li> <li>Toast system surfaces Gateway and tool errors with actionable guidance.</li> <li>Stores user preferences in <code>localStorage</code> with schema versioning.</li> </ul>"},{"location":"technical-manual/components/ui/#automation-hooks","title":"Automation Hooks","text":"<ul> <li><code>data-testid</code> attributes on interactive elements enable Playwright scripting.</li> <li><code>window.sendJsonData</code> centralizes REST calls, simplifying mock injection.</li> <li>Speech store exposes stubbable methods so automated tests can bypass WebRTC.</li> </ul>"},{"location":"technical-manual/components/ui/#deployment","title":"Deployment","text":"<ul> <li>Built as part of <code>agent-ui</code> Docker image (see <code>webui/Dockerfile</code>).</li> <li>Served via nginx within the container; assets cached aggressively with cache-busting hashes.</li> <li>Reverse proxy (Gateway or Cloudflare Tunnel) handles TLS termination and WebSocket upgrades.</li> </ul>"},{"location":"technical-manual/components/ui/#observability","title":"Observability","text":"<ul> <li>Browser console traces key lifecycle events when <code>LOG_LEVEL=debug</code>.</li> <li>Gateway tracks WebSocket connect/disconnect metrics and error codes.</li> <li>Roadmap item: emit frontend telemetry via optional analytics adapter.</li> </ul>"},{"location":"technical-manual/components/ui/#verification-checklist","title":"Verification Checklist","text":"<ul> <li>[ ] UI renders chat interface and receives streamed tokens from Gateway locally.</li> <li>[ ] Settings modal persists provider overrides across reloads.</li> <li>[ ] Playwright smoke test (<code>tests/playwright/test_ui_chat.py</code>) passes in CI.</li> </ul>"},{"location":"technical-manual/runbooks/","title":"Operational Runbooks","text":""},{"location":"technical-manual/runbooks/#start-stop-stack","title":"Start / Stop Stack","text":"<p>Start <pre><code>make dev-up\n</code></pre></p> <p>Stop <pre><code>make dev-down\n</code></pre></p> <p>Clean (wipe volumes) <pre><code>make dev-clean\n</code></pre></p> <p>Status <pre><code>make dev-status\n</code></pre></p>"},{"location":"technical-manual/runbooks/#smoke-tests","title":"Smoke Tests","text":"<pre><code>pytest tests/integration/test_gateway_public_api.py\npytest tests/playwright/test_realtime_speech.py --headed\n</code></pre>"},{"location":"technical-manual/runbooks/#database-maintenance","title":"Database Maintenance","text":"<ul> <li>Backups: <code>docker exec somaAgent01_postgres pg_dump somaagent01 &gt; backup.sql</code>.</li> <li>Restore: <code>docker exec -i somaAgent01_postgres psql somaagent01 &lt; backup.sql</code>.</li> </ul>"},{"location":"technical-manual/runbooks/#kafka-recovery","title":"Kafka Recovery","text":"<ol> <li>Check broker logs.</li> <li>Restart broker container.</li> <li>Verify topics and consumer lag.</li> </ol>"},{"location":"technical-manual/runbooks/#observability-checks","title":"Observability Checks","text":"<ul> <li>Metrics: verify Prometheus targets are UP; dashboards live in the external observability project.</li> <li>Logs: <code>docker logs -f somaAgent01_gateway</code>.</li> </ul>"},{"location":"user-manual/","title":"SomaAgent01 User Manual","text":"<p>Welcome to the SomaAgent01 User Manual. This handbook explains how to deploy, configure, and operate the agent stack from a user perspective. Each section is validated against the documentation checklist\u2014purpose, prerequisites, procedures, verification, and references\u2014so you always know what to do and how to confirm success.</p>"},{"location":"user-manual/#how-to-use-this-manual","title":"How to Use This Manual","text":"<ul> <li>Start with Quick Wins: Follow the Getting Started guide to launch the stack in minutes.</li> <li>Go Deeper: The Feature Playbook covers day-to-day tasks in the Web UI, including file management and multi-agent orchestration.</li> <li>Stay Operational: When something goes wrong, the Troubleshooting Matrix provides decision trees, log breadcrumbs, and escalation paths.</li> <li>Learn the Vocabulary: Refer to the Glossary for canonical terminology.</li> </ul> <p>[!TIP] All user-facing procedures include a \"Verification\" section so you can confirm that the step completed successfully before moving on.</p>"},{"location":"user-manual/#manual-structure","title":"Manual Structure","text":"<ul> <li>Getting Started</li> <li>Installation Paths</li> <li>Using the Agent</li> <li>Troubleshooting &amp; FAQ</li> <li>Accessibility Statement</li> </ul> <p>Every page declares ownership, reviewers, and a last-reviewed date. When content changes, update the metadata and notify stakeholders through the documentation change log.</p>"},{"location":"user-manual/accessibility/","title":"Accessibility Statement","text":"<p>SomaAgent01 commits to inclusive, accessible experiences. This statement outlines the standards we meet today, the gaps we are closing, and how to report accessibility issues.</p>"},{"location":"user-manual/accessibility/#compliance-baseline","title":"Compliance Baseline","text":"<ul> <li>Conformance target: WCAG 2.1 Level AA.</li> <li>Screen reader support: Tested with NVDA (Windows) and VoiceOver (macOS).</li> <li>Keyboard navigation: All critical interactions (chat input, action buttons, settings) reachable with <code>Tab</code>/<code>Shift+Tab</code>.</li> <li>Color contrast: UI palette audited against AA thresholds (contrast ratio \u2265 4.5:1 for body text).</li> </ul>"},{"location":"user-manual/accessibility/#tested-components","title":"Tested Components","text":"Component Assistive Tech Result Chat transcript NVDA 2025.2 Announces agent and user speaker labels Action buttons VoiceOver (macOS 15) All buttons focusable and labeled Settings forms NVDA Form fields expose labels and validation hints Notification toasts VoiceOver Aria-live regions announce status updates"},{"location":"user-manual/accessibility/#known-limitations","title":"Known Limitations","text":"<ul> <li>Diagram modals are partially accessible; keyboard trap mitigations ship in Sprint 45.</li> <li>Audio player controls rely on browser defaults. Enhanced ARIA labels are in progress.</li> </ul>"},{"location":"user-manual/accessibility/#reporting-issues","title":"Reporting Issues","text":"<p>Email <code>accessibility@somaagent01.dev</code> or open a GitHub issue with the <code>accessibility</code> label. Include browser, assistive tech, and reproduction steps.</p>"},{"location":"user-manual/accessibility/#continuous-improvement","title":"Continuous Improvement","text":"<ul> <li>Quarterly audits logged in <code>docs/changelog.md</code>.</li> <li>Automated tests run <code>axe-core</code> via the docs CI workflow.</li> <li>Accessibility scorecards tracked in the Documentation Audit Checklist.</li> </ul>"},{"location":"user-manual/getting-started/","title":"Getting Started with SomaAgent01","text":"<p>This guide walks you from zero to a functioning SomaAgent01 UI in minutes. It builds on the installation flow and ends with a verified task so you know the environment works end-to-end.</p>"},{"location":"user-manual/getting-started/#1-launch-the-web-ui","title":"1. Launch the Web UI","text":"<ol> <li>Open a terminal inside the SomaAgent01 checkout or the shipped Docker container.</li> <li>Activate your runtime environment (virtualenv or Conda) if you are running locally.</li> <li>Start the UI service:</li> </ol> <pre><code>python run_ui.py\n</code></pre> <ol> <li>When the server starts, note the hostname and port printed to the console (for example <code>http://127.0.0.1:50001</code>).</li> <li>Open the URL in your browser. You should see the SomaAgent01 UI with the dashboard and left-hand navigation.</li> </ol> <p>[!TIP] If you are running through Docker Compose, use <code>docker compose -p somaagent01 --profile dev -f docker-compose.yaml up agent-ui</code>. The default host port is <code>${AGENT_UI_PORT:-20015}</code>, but you can override it via environment variables or the compose file.</p>"},{"location":"user-manual/getting-started/#2-explore-the-chat-interface","title":"2. Explore the Chat Interface","text":"<p>The UI exposes four primary controls below the conversation panel:</p> <ul> <li><code>New Chat</code> creates an empty session.</li> <li><code>Reset Chat</code> clears memory persistence for the current session.</li> <li><code>Save Chat</code> writes the conversation to <code>/tmp/chats</code> in JSON format.</li> <li><code>Load Chat</code> restores a saved transcript.</li> </ul> <p>Use these controls to manage workspaces and maintain reproducibility.</p>"},{"location":"user-manual/getting-started/#3-run-a-sample-task","title":"3. Run a Sample Task","text":"<ol> <li>In the chat input field, enter: <code>Download a YouTube video for me</code>.</li> <li>Observe the agent thoughts and tool invocations in real time. SomaAgent01 will propose a solution using <code>code_execution_tool</code>.</li> <li>When prompted, provide a YouTube URL. The agent downloads the asset and reports the saved file path.</li> </ol>"},{"location":"user-manual/getting-started/#verification","title":"Verification","text":"<ul> <li>The task log shows tool execution steps without errors.</li> <li>A file is present in the reported directory.</li> <li>The UI confirms success with a green notification.</li> </ul> <p>If any step fails, consult the Troubleshooting &amp; FAQ matrix for targeted remediation.</p>"},{"location":"user-manual/getting-started/#4-next-steps","title":"4. Next Steps","text":"<ul> <li>Learn the daily workflows in the feature playbook.</li> <li>Configure SLM credentials and persistence using the installation guide.</li> <li>Bookmark the troubleshooting matrix for fast recovery during operations.</li> </ul> <p>[!IMPORTANT] Keep the UI port private. When exposing the tunnel externally, enable authentication and TLS proxies according to the security guidelines in the Technical Manual.</p>"},{"location":"user-manual/installation/","title":"SomaAgent01 Installation Guide","text":"<p>Follow this document to install, launch, and verify SomaAgent01 across Windows, macOS, and Linux. Each pathway includes screenshots, commands, and post-installation validation.</p>"},{"location":"user-manual/installation/#1-choose-your-runtime","title":"1. Choose Your Runtime","text":"Option When to choose Requirements Managed Soma SLM (recommended) Default experience with zero GPU footprint Internet access to Soma SLM endpoint Local runtime with Docker Desktop Offline trials, custom GPU workloads Docker Desktop 4.32+, 12 GB RAM Local models via Ollama (optional) When the SLM endpoint is unreachable Ollama 0.3+, local disk for model caches <p>[!TIP] The managed Soma SLM profile is already wired through <code>.env</code> values (<code>SLM_BASE_URL</code>, <code>SLM_API_KEY</code>). If those variables are present, you can skip the Ollama setup entirely.</p>"},{"location":"user-manual/installation/#2-install-docker-desktop-windows-macos-linux","title":"2. Install Docker Desktop (Windows, macOS, Linux)","text":"<ol> <li>Download Docker Desktop from the official portal.</li> <li>Run the installer with default settings.</li> <li>On macOS, drag Docker Desktop to <code>Applications</code> and enable Allow the default Docker socket to be used under Settings \u2192 Advanced.</li> <li>Launch Docker Desktop and ensure the whale icon is visible in your system tray or menu bar.</li> </ol> <p>[!NOTE] Linux users may substitute Docker Desktop with <code>docker-ce</code>. After installation, add your user to the <code>docker</code> group:</p> <pre><code>sudo usermod -aG docker $USER\nnewgrp docker\ndocker login\n</code></pre>"},{"location":"user-manual/installation/#3-pull-the-somaagent01-image","title":"3. Pull the SomaAgent01 Image","text":"<p>You can pull via Docker Desktop UI or the CLI:</p> <pre><code>docker pull agent0ai/agent-zero:latest\n</code></pre> <p>For the hacking edition, pull <code>agent0ai/agent-zero:hacking</code>.</p>"},{"location":"user-manual/installation/#4-optional-prepare-persistent-storage","title":"4. (Optional) Prepare Persistent Storage","text":"<ol> <li>Create a directory for persistent volumes (for example <code>~/somaagent01/data</code>).</li> <li>Map sub-folders as needed:</li> <li><code>/a0/agents</code></li> <li><code>/a0/memory</code></li> <li><code>/a0/knowledge</code></li> <li><code>/a0/instruments</code></li> <li><code>/a0/tmp</code></li> </ol> <p>[!CAUTION] Mapping the entire <code>/a0</code> directory may complicate upgrades. Prefer mapping only the sub-folders you need or rely on the built-in backup feature.</p>"},{"location":"user-manual/installation/#5-run-the-container","title":"5. Run the Container","text":"<p>Using Docker Desktop:</p> <ol> <li>Open the Images tab.</li> <li>Locate <code>agent0ai/agent-zero</code> and click Run.</li> <li>Expand Optional settings and set the host port for container port <code>80</code> (use <code>0</code> for auto selection).</li> <li>Configure volume mounts if you created persistence directories.</li> <li>Click Run; the container appears under Containers.</li> </ol> <p>Using CLI:</p> <pre><code>docker run -p 50080:80 \\\n  -v ~/somaagent01/memory:/a0/memory \\\n  -v ~/somaagent01/tmp:/a0/tmp \\\n  agent0ai/agent-zero:latest\n</code></pre>"},{"location":"user-manual/installation/#quickstart-local-dev-stack-via-docker-compose","title":"Quickstart: Local Dev Stack via Docker Compose","text":"<p>If you're working from source and prefer the lightweight dev stack, use the included compose file and Make targets.</p> <pre><code># From the repository root\nmake dev-up          # start minimal stack (Postgres, Redis, Kafka, OPA, Gateway, Workers)\nmake dev-logs        # tail logs\nmake dev-down        # stop stack\n</code></pre> <p>Default host ports (can vary if occupied):</p> <ul> <li>Gateway API: http://localhost:60816 (mapped to container :8010)</li> <li>Postgres: localhost:60803</li> <li>Redis: localhost:60802</li> <li>Kafka: localhost:60801</li> </ul> <p>Verify the gateway health:</p> <pre><code>curl -sSf http://localhost:60816/v1/health | jq\n</code></pre>"},{"location":"user-manual/installation/#6-verify-the-deployment","title":"6. Verify the Deployment","text":"<ul> <li>Open the mapped port in your browser: <code>http://localhost:&lt;PORT&gt;</code>.</li> <li>Sign in if authentication is enabled.</li> <li>Run the built-in smoke check:</li> <li>Open the Settings \u2192 Diagnostics tab.</li> <li>Click Run Smoke Test.</li> <li>Confirm all checks are green.</li> </ul> <p>If the UI fails to load, review container logs (<code>docker logs &lt;container_id&gt;</code>) for errors. See the Troubleshooting &amp; FAQ page for targeted fixes.</p>"},{"location":"user-manual/installation/#7-configure-soma-slm-access","title":"7. Configure Soma SLM Access","text":"<ol> <li>Open Settings \u2192 API Keys.</li> <li>Provide <code>SLM_API_KEY</code> and verify <code>SLM_BASE_URL</code> (defaults to <code>https://slm.somaagent01.dev/v1</code>).</li> <li>Save changes and restart the <code>conversation_worker</code> service.</li> </ol>"},{"location":"user-manual/installation/#verification","title":"Verification","text":"<ul> <li>Execute the <code>/health</code> endpoint: <code>curl http://localhost:&lt;PORT&gt;/health</code>.</li> <li>Run a sample chat request (see Getting Started).</li> <li>Confirm the Status badge in the header is green.</li> </ul>"},{"location":"user-manual/installation/#8-optional-local-models-with-ollama","title":"8. Optional: Local Models with Ollama","text":"<p>Use these steps only if you cannot access the managed endpoint:</p> <pre><code># macOS (Homebrew)\nbrew install ollama\n\n# Linux\ncurl -fsSL https://ollama.com/install.sh | sh\n\n# Pull a lightweight model\nollama pull phi3:3.8b\n</code></pre> <p>Update the UI settings:</p> <ol> <li>Change the provider to Ollama for Chat/Utility/Embedding models.</li> <li>Set the base URL to <code>http://host.docker.internal:11434</code>.</li> <li>Save configuration.</li> </ol>"},{"location":"user-manual/installation/#9-mobile-or-external-access","title":"9. Mobile or External Access","text":"<ol> <li>Confirm the container port mapping (e.g., <code>32771:80</code>).</li> <li>Access the UI via <code>http://&lt;HOST_IP&gt;:&lt;PORT&gt;</code> on devices within your network.</li> <li>When enabling Cloudflare Tunnel under Settings \u2192 External Services, configure authentication first to avoid public exposure without credentials.</li> </ol>"},{"location":"user-manual/installation/#10-upgrade-strategy","title":"10. Upgrade Strategy","text":"<ol> <li>Stop the running container:</li> </ol> <pre><code>docker stop somaagent01\n</code></pre> <ol> <li>Remove the container (data persists in mounted volumes):</li> </ol> <pre><code>docker rm somaagent01\n</code></pre> <ol> <li>Pull the latest image and rerun with previous volume mappings.</li> <li>If settings fail to load, delete <code>/a0/tmp/settings.json</code> and restart\u2014the UI rebuilds defaults automatically.</li> </ol>"},{"location":"user-manual/installation/#11-post-installation-checklist","title":"11. Post-Installation Checklist","text":"<ul> <li>[ ] Container is running without errors.</li> <li>[ ] Web UI accessible via browser.</li> <li>[ ] Smoke test passes.</li> <li>[ ] API credentials stored securely.</li> <li>[ ] Backups scheduled via Settings \u2192 Backup.</li> <li>[ ] Change logged in <code>docs/changelog.md</code>.</li> </ul> <p>[!IMPORTANT] Store sensitive backups in a secure location. Backups include chat history, API keys, and custom knowledge files.</p>"},{"location":"user-manual/troubleshooting/","title":"Troubleshooting &amp; FAQ","text":"<p>Use this matrix to diagnose and resolve common SomaAgent01 issues. Each entry gives symptoms, root causes, remediation steps, and verification.</p>"},{"location":"user-manual/troubleshooting/#faq","title":"FAQ","text":"Question Resolution How do I let the agent edit my files? Mount or place files in <code>/work_dir</code>. The File Browser can navigate to the root, but tool execution occurs under <code>/work_dir</code>. Why is nothing happening after I send a prompt? Check Settings \u2192 API Keys and ensure chat/utility providers have valid keys. Without them the backend cannot reach the LLMs. Can I use open-source models? Yes. Follow the Ollama flow. Set providers to <code>Ollama</code> in the settings. How do I persist memory between upgrades? Use the in-app Backup &amp; Restore or mount <code>/a0/memory</code>. Review the upgrade steps in Installation Paths. Where can I get more help? Join the SomaAgent01 Skool or Discord communities, or open an issue in the repository."},{"location":"user-manual/troubleshooting/#incident-playbooks","title":"Incident Playbooks","text":""},{"location":"user-manual/troubleshooting/#1-chat-input-hangs-or-times-out","title":"1. Chat Input Hangs or Times Out","text":"<p>Symptoms: UI shows a spinner indefinitely; no tool execution logs.</p> <p>Root Causes: Missing API keys, rate limits reached, or backend worker offline.</p> <p>Remediation: 1. Verify API keys in Settings \u2192 API Keys. 2. Check <code>conversation_worker</code> logs (<code>docker logs &lt;worker-container&gt;</code>). 3. Restart the worker service via the UI or <code>docker compose restart conversation_worker</code>.</p> <p>Verification: New chat request completes within 30 seconds and the worker logs show successful tool execution.</p>"},{"location":"user-manual/troubleshooting/#2-code_execution_tool-fails","title":"2. <code>code_execution_tool</code> Fails","text":"<p>Symptoms: Tool fails with Docker errors or permission denied.</p> <p>Root Causes: Docker not running, outdated base image, or insufficient file access.</p> <p>Remediation: 1. Confirm Docker Desktop is active. 2. On macOS, grant file access under Docker Desktop \u2192 Settings \u2192 Resources \u2192 File Sharing. 3. Remove and repull the execution image:</p> <pre><code>docker rmi agent0ai/agent-zero-exec || true\ndocker pull agent0ai/agent-zero-exec\n</code></pre> <p>Verification: Re-run the task; tool completes and outputs artifact paths.</p>"},{"location":"user-manual/troubleshooting/#3-slow-or-unresponsive-ui","title":"3. Slow or Unresponsive UI","text":"<p>Symptoms: UI stutters, requests lag, or messages time out.</p> <p>Root Causes: Local resource constraints, large prompt context, network latency.</p> <p>Remediation: 1. Reduce concurrent chats and clear history. 2. Allocate more CPU/RAM to Docker Desktop. 3. If using Ollama, choose smaller models (<code>phi3:3.8b</code>).</p> <p>Verification: Subsequent prompts respond within expected SLA (&lt;5s for cached operations, &lt;30s for tool runs).</p>"},{"location":"user-manual/troubleshooting/#4-authentication-or-authorization-errors","title":"4. Authentication or Authorization Errors","text":"<p>Symptoms: <code>401</code> or <code>403</code> when accessing UI or API.</p> <p>Root Causes: Missing UI credentials, misconfigured OPA policies.</p> <p>Remediation: 1. Set UI username/password under Settings \u2192 Authentication. 2. Inspect OPA decision logs (<code>http://localhost:8181/v1/data/http/authz/allow</code>). 3. Reapply policy bundles from the Technical Manual.</p> <p>Verification: Authenticated users regain access; unauthorized requests remain blocked.</p>"},{"location":"user-manual/troubleshooting/#5-backups-fail-to-restore","title":"5. Backups Fail to Restore","text":"<p>Symptoms: Restore wizard errors, mismatched data after restore.</p> <p>Root Causes: Corrupt archive, incompatible patterns, insufficient disk space.</p> <p>Remediation: 1. Validate archive locally (<code>unzip -t backup.zip</code>). 2. Review restore patterns to avoid path collisions. 3. Ensure the container has enough disk space (<code>docker system df</code>).</p> <p>Verification: Post-restore, knowledge files, chats, and settings match the source environment.</p>"},{"location":"user-manual/troubleshooting/#escalation","title":"Escalation","text":"<ul> <li>Collect UI screenshots, container logs, and timestamps.</li> <li>File an incident in the project tracker with reproduction steps.</li> <li>Notify on-call via the <code>#soma-oncall</code> channel.</li> </ul> <p>[!IMPORTANT] Update the Change Log after significant incidents, including resolution steps and preventive actions.</p>"},{"location":"user-manual/tunnels/","title":"Secure Tunnel Access","text":"<p>SomaAgent01 can expose a local instance to collaborators through the built-in Flaredantic tunnel integration. Use this guide to enable secure sharing, add authentication, and monitor sessions.</p>"},{"location":"user-manual/tunnels/#1-how-tunnels-work","title":"1. How Tunnels Work","text":"<ul> <li>Backed by the Flaredantic library.</li> <li>Generates a unique HTTPS endpoint per session; no port forwarding required.</li> <li>Stops automatically when the UI terminates or you click Stop Tunnel.</li> </ul>"},{"location":"user-manual/tunnels/#2-create-a-tunnel","title":"2. Create a Tunnel","text":"<ol> <li>Open Settings \u2192 External Services.</li> <li>Select Flare Tunnel.</li> <li>Click Create Tunnel.</li> <li>Copy the generated URL and share it with stakeholders.</li> <li>Monitor the status badge; green indicates the tunnel is live.</li> </ol> <p>Verification: Open the tunnel URL from an external network. The SomaAgent01 login form should appear and the status badge should remain green.</p>"},{"location":"user-manual/tunnels/#3-secure-the-endpoint","title":"3. Secure the Endpoint","text":"<p>Add authentication before sharing:</p> <pre><code>export AUTH_LOGIN=\"viewer\"\nexport AUTH_PASSWORD=\"strong-secret\"\n</code></pre> <p>Or configure inside the UI:</p> <ol> <li>Settings \u2192 External Services \u2192 Authentication.</li> <li>Provide UI username and password.</li> <li>Save and restart the session if prompted.</li> </ol> <p>Security Notes - Anyone with the URL can access the UI unless authentication is enforced. - Tunnels expose only the Agent Zero stack, not the host filesystem, but uploaded files remain accessible within <code>/work_dir</code>. - Rotate tunnel URLs after each engagement.</p>"},{"location":"user-manual/tunnels/#4-troubleshooting","title":"4. Troubleshooting","text":"Symptom Resolution Tunnel fails to start Confirm internet access, retry creation, inspect gateway logs URL unreachable Check corporate firewall/SSL inspection rules Unexpected disconnects Regenerate the tunnel; ensure the UI process remains running Authentication prompt missing Verify <code>AUTH_LOGIN</code>/<code>AUTH_PASSWORD</code> or settings values are set and restart services"},{"location":"user-manual/tunnels/#5-close-the-tunnel","title":"5. Close the Tunnel","text":"<ul> <li>Click Stop Tunnel in the same settings tab, or</li> <li>Shut down the SomaAgent01 UI service; the tunnel terminates automatically.</li> </ul> <p>Verification: Accessing the previous tunnel URL should now return an error or timeout within 60 seconds.</p>"},{"location":"user-manual/tunnels/#6-audit-compliance","title":"6. Audit &amp; Compliance","text":"<ul> <li>Log tunnel creation/destruction events in <code>docs/changelog.md</code> when used for customer demos or incidents.</li> <li>For long-lived tunnels, configure IP allow-lists via Cloudflare Access (roadmap item).</li> </ul>"},{"location":"user-manual/tunnels/#7-related-resources","title":"7. Related Resources","text":"<ul> <li>Getting Started</li> <li>Troubleshooting Matrix</li> <li>Security Baseline</li> </ul>"},{"location":"user-manual/ui-overview/","title":"Web UI Walkthrough","text":"<p>This guide explains every major surface in the SomaAgent01 web UI so operators can navigate confidently, extend the interface, and verify accessibility requirements.</p>"},{"location":"user-manual/ui-overview/#1-authentication-flow","title":"1. Authentication Flow","text":"<pre><code>flowchart LR\n    A[Login Page] --&gt; B[Submit credentials]\n    B --&gt; C{Valid?}\n    C -- Yes --&gt; D[Redirect to Chat UI]\n    C -- No --&gt; E[Show error]\n</code></pre> <ul> <li>Credentials default to the values stored in <code>.env</code> (<code>AUTH_LOGIN</code>, <code>AUTH_PASSWORD</code>) or the settings service.</li> <li>Failed attempts emit structured events for the security audit log.</li> <li>Passwords never render back into the DOM after successful login.</li> </ul> <p>Verification: Attempt a login with valid credentials; UI redirects to the chat view and the header shows the active tenant.</p>"},{"location":"user-manual/ui-overview/#2-chat-workspace","title":"2. Chat Workspace","text":"<pre><code>flowchart TB\n    subgraph Chat UI\n        Input[Message input] --&gt; Send[Send button]\n        Send --&gt; WS[WebSocket stream]\n        WS --&gt; Core[Agent orchestration]\n        Core --&gt; Stream[Streamed response]\n        Stream --&gt; Render[Chat window]\n    end\n    Render --&gt; Actions[Copy / Regenerate]\n</code></pre> <ul> <li>Real-time responses flow through the <code>response_stream_chunk</code> hook before rendering.</li> <li>Managing sessions: <code>New Chat</code>, <code>Reset Chat</code>, <code>Save Chat</code>, and <code>Load Chat</code> manage JSON transcripts in <code>/tmp/chats</code>.</li> <li>Action bar controls pause/resume processing, import knowledge, inspect context/history, and retry the previous step via Nudge.</li> </ul> <p>Verification: Send a message, observe streaming updates, and confirm transcript persistence by saving and reloading the chat file.</p>"},{"location":"user-manual/ui-overview/#3-settings-modal","title":"3. Settings Modal","text":"<pre><code>flowchart LR\n    Button[Settings button] --&gt; Modal[Open modal]\n    Modal --&gt; Tabs[Agent | Models | Speech | Advanced]\n    Tabs --&gt; Save[Save]\n    Save --&gt; Persist[Write tmp/settings.json]\n    Persist --&gt; Reload[Runtime reload]\n</code></pre> <ul> <li>Each tab maps to Pydantic schemas in <code>services/gateway/routes/settings.py</code>.</li> <li>Sensitive fields render masked placeholders to avoid leaking secrets.</li> <li>Changes trigger a runtime reload via the <code>apply_settings</code> pipeline.</li> </ul> <p>Verification: Update a non-critical setting (for example, chat temperature), save, and confirm the change persists after refreshing the page.</p>"},{"location":"user-manual/ui-overview/#4-voice-interface-optional","title":"4. Voice Interface (Optional)","text":"<pre><code>flowchart TB\n    Mic[Microphone button] --&gt; Capture[Capture audio]\n    Capture --&gt; Transcribe[POST /speech/transcribe]\n    Transcribe --&gt;|Success| Insert[Populate message input]\n    Transcribe --&gt;|Failure| Error[Show toast]\n</code></pre> <ul> <li>Speech-to-text runs locally via the speech service; no external API keys required.</li> <li>Text-to-speech toggles in the sidebar; playback can be stopped via the \"Stop Speech\" button.</li> </ul> <p>Verification: Record a short prompt using the microphone and ensure the text populates in the message input field.</p>"},{"location":"user-manual/ui-overview/#5-extension-hooks","title":"5. Extension Hooks","text":"Hook Trigger Typical Use <code>response_stream_chunk</code> Each streamed token Redact sensitive text or enrich with markdown <code>ui_before_render</code> Prior to DOM update Inject analytics, reaction buttons <code>ui_on_error</code> Exception propagation Replace default error alert <p>Register hooks via <code>python/helpers/browser_use_monkeypatch.py</code>:</p> <pre><code>from python.helpers import browser_use_monkeypatch\n\ndef stamp_chunk(chunk: str) -&gt; str:\n    return f\"[{time.time():.0f}] {chunk}\"\n\nbrowser_use_monkeypatch.response_stream_chunk = stamp_chunk\n</code></pre> <p>Changes take effect immediately after a page reload and preserve the lightweight HTML/JS implementation.</p>"},{"location":"user-manual/ui-overview/#6-accessibility-commitments","title":"6. Accessibility Commitments","text":"<ul> <li>Keyboard navigation covers every action button and settings control.</li> <li><code>aria-label</code> attributes describe interactive elements; modals trap focus until closed.</li> <li>Colour palette meets WCAG AA contrast ratios; dark mode toggle (roadmap item) will keep the same guarantees.</li> <li>Screen readers announce agent messages and toast notifications via <code>aria-live</code> regions.</li> </ul> <p>Verification: Run <code>make docs-verify</code> (includes accessibility lint) and perform a manual keyboard walk-through to ensure focus states cycle correctly.</p>"},{"location":"user-manual/ui-overview/#7-future-enhancements","title":"7. Future Enhancements","text":"<ul> <li>Dark mode: persisted per user in <code>tmp/settings.json</code>.</li> <li>Rich text editor: lightweight WYSIWYG for formatted prompts.</li> <li>Metrics side panel: optional SSE-powered live telemetry for latency and cost.</li> </ul> <p>Track UI backlog items in the Documentation Change Log and update this page when features graduate from experimental status.</p>"},{"location":"user-manual/using-the-agent/","title":"SomaAgent01 Feature Playbook","text":"<p>This playbook documents the day-to-day workflows available through the SomaAgent01 web UI. Every workflow lists prerequisites, the procedure, and a verification step.</p>"},{"location":"user-manual/using-the-agent/#control-panel-essentials","title":"Control Panel Essentials","text":""},{"location":"user-manual/using-the-agent/#restart-the-framework","title":"Restart the Framework","text":"<p>Purpose: Safely reinitialize the backend without leaving the UI.</p> <p>Procedure: 1. Click Restart in the sidebar. 2. Confirm the prompt when asked.</p> <p>Verification: A blue \"Restarting\" toast appears, followed by a green \"Restarted\" toast. The chat history persists.</p>"},{"location":"user-manual/using-the-agent/#manage-chats","title":"Manage Chats","text":"<ul> <li>New Chat: Clears current context and starts fresh.</li> <li>Reset Chat: Deletes cached memory for the active chat.</li> <li>Save Chat: Downloads the conversation JSON to <code>/tmp/chats</code>.</li> <li>Load Chat: Restores a saved transcript for replay.</li> </ul> <p>[!TIP] Name saved chats after the task (<code>vector-search-audit.json</code>) to aid reuse.</p>"},{"location":"user-manual/using-the-agent/#action-buttons-context-frames","title":"Action Buttons &amp; Context Frames","text":"Button Role Verification Pause/Resume Agent Temporarily halt or resume tool invocations Button label toggles; tasks stop immediately Import Knowledge Upload domain files into <code>/knowledge/custom/main</code> Success toast indicating stored path Context Inspect the full prompt, instructions, and memory Drawer opens with system prompts and messages History Review the latest JSON request payload Drawer shows the serialized exchange Nudge Replays the last agent step A retry log entry appears in the transcript"},{"location":"user-manual/using-the-agent/#file-browser-operations","title":"File Browser Operations","text":"<ol> <li>Open the file icon in the top navigation.</li> <li>Use the breadcrumb navigator to switch directories (<code>Up</code> returns to parent path).</li> <li>Upload, download, rename, or delete files using the inline icons.</li> </ol> <p>Verification: Newly uploaded files appear in the listing with correct size and timestamp.</p> <p>[!NOTE] The working directory for agents remains <code>/work_dir</code> even if the browser lets you navigate the container root.</p>"},{"location":"user-manual/using-the-agent/#tooling-and-prompt-engineering","title":"Tooling and Prompt Engineering","text":""},{"location":"user-manual/using-the-agent/#invoke-multi-tool-workflows","title":"Invoke Multi-Tool Workflows","text":"<ol> <li>Provide a concise objective and tool hints (e.g., \"Use <code>search_engine</code> then <code>code_execution_tool</code>\").</li> <li>Review the task plan generated by SomaAgent01.</li> <li>Approve the plan or add constraints (time limits, data sources).</li> <li>Monitor tool execution in the right-hand pane.</li> </ol> <p>Verification: The final response cites tools used and the artifacts generated (files, URLs).</p>"},{"location":"user-manual/using-the-agent/#prompt-iteration-best-practices","title":"Prompt Iteration Best Practices","text":"<ul> <li>Be explicit about outputs (\"Return a CSV with columns date, price, sentiment\").</li> <li>Break complex tasks into sequenced subtasks.</li> <li>Use follow-up messages to refine, rather than rewriting instructions.</li> </ul>"},{"location":"user-manual/using-the-agent/#voice-interface","title":"Voice Interface","text":""},{"location":"user-manual/using-the-agent/#text-to-speech-tts","title":"Text-to-Speech (TTS)","text":"<ol> <li>Activate the Speech toggle in the sidebar.</li> <li>Listen to the agent response.</li> <li>Click Stop Speech to interrupt playback.</li> </ol> <p>Verification: Audio output matches the current message and stops on demand.</p>"},{"location":"user-manual/using-the-agent/#speech-to-text-stt","title":"Speech-to-Text (STT)","text":"<ol> <li>Click the microphone icon.</li> <li>Speak your instruction. Watch the color-coded status (red \u2192 recording, teal \u2192 processing).</li> <li>Release to send.</li> </ol> <p>Verification: The transcribed text appears in the chat input and submits automatically.</p> <p>[!IMPORTANT] All STT/TTS processing occurs inside the container. No audio data is sent to external APIs unless explicitly configured.</p>"},{"location":"user-manual/using-the-agent/#marketplace-capsules","title":"Marketplace &amp; Capsules","text":"<ol> <li>Navigate to <code>http://localhost:7002/marketplace.html</code> while the stack is running.</li> <li>Browse the capsule catalog served by the gateway (<code>/v1/capsules</code>).</li> <li>Install a capsule; monitor response banners for signature status.</li> <li>Validate the artifact in the registry <code>installed/</code> directory.</li> </ol> <p>Verification: The capsule appears in the installed list and exposes new tools in the UI.</p>"},{"location":"user-manual/using-the-agent/#backup-restore","title":"Backup &amp; Restore","text":"<ol> <li>Open Settings \u2192 Backup.</li> <li>Click Create Backup and confirm included directories.</li> <li>Download the ZIP archive.</li> <li>To restore, upload the archive via Restore from Backup, choose overwrite rules, and confirm.</li> </ol> <p>Verification: Backup archive contains knowledge, memory, chats, and configuration files. After restore, settings and history match the source environment.</p>"},{"location":"user-manual/using-the-agent/#accessibility-commitments","title":"Accessibility Commitments","text":"<ul> <li>The UI supports keyboard navigation for primary controls.</li> <li>Screen readers announce agent messages and status toasts.</li> <li>Color usage meets WCAG AA contrast ratios.</li> </ul> <p>See the Accessibility Statement for detailed conformance notes.</p>"},{"location":"user-manual/using-the-agent/#when-things-break","title":"When Things Break","text":"<p>If you encounter errors or degraded performance:</p> <ul> <li>Check Docker logs for stack traces.</li> <li>Review the Troubleshooting &amp; FAQ decision tree.</li> <li>Escalate to the on-call channel if verification fails twice.</li> </ul>"},{"location":"user-manual/features/memory-management/","title":"Memory Management","text":"<p>This page has moved into the User Manual. See Development Manual \u2192 API Reference for programmatic usage.</p> <p>Include of core guidance and examples was updated to match the class-based Memory API.</p>"}]}