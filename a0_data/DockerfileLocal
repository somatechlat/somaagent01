# Use the pre-built base image for A0
# FROM agent-zero-base:local
FROM agent0ai/agent-zero-base:latest

# Increase HTTP timeout for uv to reduce transient download failures
ENV UV_HTTP_TIMEOUT=180

# Set BRANCH to "local" if not provided
ARG BRANCH=local
ENV BRANCH=$BRANCH
 
# Build-time toggles (kept minimal and backwards-compatible)
# SERVICE: optional service name to include specific runtime deps (e.g. memory_service)
# K8S: optional flag for k8s-tuned builds (not changing entrypoint or compose behavior)
ARG SERVICE=""
ARG K8S=false
# Torch variant controls whether torch is installed and which wheel to use:
#   none -> do not install torch
#   cpu  -> install CPU-only torch from PyTorch cpu index
#   cuda -> install CUDA-enabled torch (default if you explicitly choose cuda)
ARG TORCH_VARIANT=none

# Copy filesystem files to root
COPY ./docker/run/fs/ /
# Copy current development files to git, they will only be used in "local" branch
# Provide local sources for BRANCH=local builds (required by /ins/install_A0.sh)
COPY ./ /git/agent-zero

# pre installation steps
RUN bash /ins/pre_install.sh $BRANCH

# install A0 (full/dev image only) using the new canonical installer
RUN if [ -z "$SERVICE" ]; then \
        bash /ins/install.sh $BRANCH; \
    else \
        echo "Skipping canonical installation for SERVICE=$SERVICE"; \
    fi

# install additional software (full/dev image only)
RUN if [ -z "$SERVICE" ]; then bash /ins/install_additional.sh $BRANCH; else echo "Skipping install_additional.sh for SERVICE=$SERVICE"; fi



# post installation steps (full/dev image only)
RUN if [ -z "$SERVICE" ]; then bash /ins/post_install.sh $BRANCH; else echo "Skipping post_install.sh for SERVICE=$SERVICE"; fi

# Ensure the base virtualenv stays first on PATH for runtime commands
ENV PATH="/opt/venv-a0/bin:${PATH}"

# Install service-specific system libraries in a single layer to keep the image slim
RUN set -eux; \
    apt-get update; \
    packages=""; \
    if [ -z "$SERVICE" ] || [ "$SERVICE" = "settings_service" ] || [ "$SERVICE" = "memory_service" ]; then \
        packages="$packages python3-asyncpg"; \
    fi; \
    if [ -z "$SERVICE" ] || [ "$SERVICE" = "memory_service" ]; then \
        packages="$packages python3-grpcio"; \
    fi; \
    if [ -n "$packages" ]; then \
        apt-get install -y --no-install-recommends $packages; \
    fi; \
    apt-get clean; \
    rm -rf /var/lib/apt/lists/*

# Harmonise torch installation based on the requested variant, only when explicitly enabled
ARG ENABLE_TORCH=false
ENV ENABLE_TORCH=$ENABLE_TORCH
RUN if [ -z "$SERVICE" ]; then \
                TORCH_VARIANT="${TORCH_VARIANT}" ENABLE_TORCH="${ENABLE_TORCH}" BRANCH="$BRANCH" bash -lc 'source /ins/setup_venv.sh "$BRANCH" && \
                        if [ "$ENABLE_TORCH" = "true" ]; then \
                            case "$TORCH_VARIANT" in \
                                cpu) pip install --no-cache-dir --extra-index-url https://download.pytorch.org/whl/cpu torch torchvision torchaudio ;; \
                                cuda) pip install --no-cache-dir torch torchvision torchaudio ;; \
                                none) pip uninstall -y torch torchvision torchaudio || true ;; \
                                *) echo "Unknown TORCH_VARIANT=$TORCH_VARIANT; leaving torch packages as-is" ;; \
                            esac; \
                        else \
                            echo "ENABLE_TORCH is not true; ensuring no torch packages are present"; \
                            pip uninstall -y torch torchvision torchaudio || true; \
                        fi'; \
        else \
                echo "Skipping torch harmonisation for SERVICE=$SERVICE"; \
        fi

# Install per-service runtime requirements (kept minimal, optional)
# This enables single-source per-service builds without altering compose behavior.
COPY services/memory_service/requirements.txt /tmp/memory_service.requirements.txt
RUN if [ -f /tmp/memory_service.requirements.txt ] && [ "$SERVICE" = "memory_service" ]; then \
            python3 -m pip install --break-system-packages -r /tmp/memory_service.requirements.txt; \
        fi

# Expose ports
EXPOSE 22 80 9000-9009 50052

RUN chmod +x /exe/initialize.sh /exe/run_A0.sh /exe/run_searxng.sh /exe/run_tunnel_api.sh

# initialize runtime and switch to supervisord
CMD ["/exe/initialize.sh", "$BRANCH"]
