x-agent-env: &agent-env
  PYTHONPATH: /a0:/a0/common:/a0/python:/a0/services
  LOG_LEVEL: INFO
  KAFKA_BOOTSTRAP_SERVERS: kafka:9092
  KAFKA_SECURITY_PROTOCOL: PLAINTEXT
  REDIS_URL: redis://redis:6379/0
  POSTGRES_DSN: postgresql://soma:soma@postgres:5432/somaagent01
  TELEMETRY_DATABASE_DSN: postgresql://soma:soma@postgres:5432/somaagent01
  CONVERSATION_INBOUND: conversation.inbound
  CONVERSATION_OUTBOUND: conversation.outbound
  CONVERSATION_GROUP: conversation-worker
  TOOL_REQUESTS_TOPIC: tool.requests
  TOOL_RESULTS_TOPIC: tool.results
  TOOL_EXECUTOR_GROUP: tool-executor
  OPA_URL: http://opa:8181
  POLICY_BASE_URL: http://opa:8181
  POLICY_FAIL_OPEN: "true"
  SOMA_AGENT_MODE: LOCAL
  TENANT_CONFIG_PATH: /a0/conf/tenants.yaml
  SOMA_BASE_URL: http://host.docker.internal:9696
  SOMA_CONTAINER_HOST_ALIAS: host.docker.internal
  GATEWAY_JWT_SECRET: dev-secret
  SKM_BASE_URL: http://host.docker.internal:9696
  # Fix for missing environment variables
  SLM_BASE_URL: http://host.docker.internal:9696
  ROUTER_URL: http://host.docker.internal:9696

x-svc-limits: &svc-limits
  mem_limit: 512m
  cpus: "0.50"

x-agent-service: &agent-service
  image: somaagent01-fixed:local
  build:
    context: .
    dockerfile: DockerfileFixed
    args:
      BRANCH: local
      SERVICE: developer
      FEATURE_AI: none
      FEATURE_AUDIO: none
      FEATURE_BROWSER: false
      FEATURE_DOCUMENTS: false
      FEATURE_DATABASE: true
      FEATURE_MONITORING: false
      FEATURE_DEV: true
      FEATURE_GRPC: false
      FEATURE_INTEGRATIONS: false
  working_dir: /a0
  volumes:
    # Mount all source code as read-only
    - ./:/a0:ro
    # Mount writable directories
    - ./memory:/a0/memory
    - ./logs:/a0/logs
    - agent_tmp:/a0/tmp
  extra_hosts:
    - "host.docker.internal:host-gateway"
  restart: unless-stopped

services:
  postgres:
    image: postgres:16-alpine
    container_name: somaagent01_fixed_postgres
    <<: *svc-limits
    environment:
      - POSTGRES_USER=soma
      - POSTGRES_PASSWORD=soma
      - POSTGRES_DB=somaagent01
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "60803:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U soma -d somaagent01"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: somaagent01_fixed_redis
    <<: *svc-limits
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    ports:
      - "60802:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:latest
    container_name: somaagent01_fixed_kafka
    <<: *svc-limits
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: "1"
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_KRAFT_CLUSTER_ID: "soma-cluster-01"
    ports:
      - "60801:9092"
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD", "true"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  opa:
    image: openpolicyagent/opa:0.64.0
    container_name: somaagent01_fixed_opa
    <<: *svc-limits
    command: ["run", "--server", "--set=decision_logs.console=true"]
    ports:
      - "60811:8181"

  gateway:
    <<: [*agent-service, *svc-limits]
    container_name: somaagent01_fixed_gateway
    command:
      [
        "python3",
        "-m",
        "uvicorn",
        "services.gateway.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8010"
      ]
    environment:
      <<: *agent-env
      PORT: "8010"
      GATEWAY_REQUIRE_AUTH: "false"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      opa:
        condition: service_started
    ports:
      - "60816:8010"

  conversation-worker:
    <<: [*agent-service, *svc-limits]
    container_name: somaagent01_fixed_conversation-worker
    command: ["python3", "-m", "services.conversation_worker.main"]
    environment:
      <<: *agent-env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      opa:
        condition: service_started

  tool-executor:
    <<: [*agent-service, *svc-limits]
    container_name: somaagent01_fixed_tool-executor
    command: ["python3", "-m", "services.tool_executor.main"]
    environment:
      <<: *agent-env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

  agent-ui:
    <<: [*agent-service, *svc-limits]
    container_name: somaagent01_fixed_agent-ui
    command:
      [
        "python3",
        "/a0/run_ui.py",
        "--dockerized=true",
        "--host",
        "0.0.0.0",
        "--port",
        "80"
      ]
    environment:
      <<: *agent-env
      SOMA_BASE_URL: http://gateway:8010
    depends_on:
      gateway:
        condition: service_started
    ports:
      - "60814:80"
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -sI http://localhost:80 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  postgres_data:
  kafka_data:
  agent_tmp:

networks:
  default:
    name: somaagent01_fixed