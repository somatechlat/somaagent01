# Canonical Docker Compose file for Agent Zero
# This file defines all services for the development environment.

x-agent-env: &agent-env
  # Ensure both the baked app code (/app) and mounted repo path are importable
  PYTHONPATH: "/app:/git/agent-zero"
  LOG_LEVEL: INFO
  KAFKA_BOOTSTRAP_SERVERS: kafka:9092
  REDIS_URL: redis://redis:6379/0
  POSTGRES_DSN: postgresql://soma:soma@postgres:5432/somaagent01
  POLICY_BASE_URL: http://opa:8181
  POLICY_DATA_PATH: /v1/data/soma/policy/allow
  POLICY_FAIL_OPEN: "false"
  OPA_URL: http://opa:8181
  CONVERSATION_INBOUND: conversation.inbound
  CONVERSATION_OUTBOUND: conversation.outbound
  CONVERSATION_GROUP: conversation-worker
  TOOL_REQUESTS_TOPIC: tool.requests
  TOOL_RESULTS_TOPIC: tool.results
  TOOL_EXECUTOR_GROUP: tool-executor
  SOMA_AGENT_MODE: LOCAL
  SOMA_BASE_URL: http://host.docker.internal:9696
  SOMA_CONTAINER_HOST_ALIAS: host.docker.internal
  SOMA_ENABLED: "true"
  # Ensure all services target the correct SomaBrain tenant/namespace
  SOMA_TENANT_ID: public
  SOMA_NAMESPACE: somabrain_ns:public
  SOMA_MEMORY_NAMESPACE: wm
  MEMORY_WAL_TOPIC: memory.wal
  # Default to empty in dev to avoid unintended authentication requirements.
  GATEWAY_JWT_SECRET: ${GATEWAY_JWT_SECRET:-}
  USE_LLM: "true"

x-agent-service: &agent-service
  image: somaagent01-dev:latest
  build:
    context: .
    dockerfile: Dockerfile
    args:
      # Skip heavy ML deps (torch, CUDA, unstructured) for local dev builds
      INCLUDE_ML_DEPS: ${INCLUDE_ML_DEPS:-false}
  working_dir: /git/agent-zero
  environment:
    <<: *agent-env
  env_file:
    - ${SOMA_ENV_FILE:-.env}
  # Give agent processes more memory for heavy ML package imports during runtime
  mem_limit: 10g
  volumes:
    - ./memory:/git/agent-zero/memory
    - ./logs:/git/agent-zero/logs
    - ./knowledge:/git/agent-zero/knowledge:ro
    - ./instruments:/git/agent-zero/instruments:ro
    - ./agents:/git/agent-zero/agents:ro
    - ./tmp:/git/agent-zero/tmp
    - ./prompts:/git/agent-zero/prompts:ro
    - ./webui:/git/agent-zero/webui:ro
    # Note: legacy /a0 mounts removed for modern deployments. If you need
    # historic A0 data, restore from agent-zero/legacy_a0 or the legacy backup.
  extra_hosts:
    - "host.docker.internal:host-gateway"
  depends_on:
    kafka:
      condition: service_healthy
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy
    opa:
      condition: service_started
  restart: unless-stopped

services:
  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    container_name: somaAgent01_kafka_init
    profiles: ["dev"]
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["bash", "-lc"]
    command: bash /init/init-topics.sh
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - ./infra/kafka/init-topics.sh:/init/init-topics.sh:ro
    mem_limit: 600m
    restart: "no"
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: somaAgent01_kafka
    profiles: ["core"]
    user: "0:0"
    environment:
      # KRaft mode: controller+broker in a single node for local dev
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: "0"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "0@kafka:9093"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_NUM_PARTITIONS: "3"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      # Single-broker dev settings so consumer groups and transactions work
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: "0"
      # Unique cluster id for local KRaft cluster (can be any string)
      KAFKA_CLUSTER_ID: "MkU3OEVBNTcwNTJENDM2Qk"
      CLUSTER_ID: "MkU3OEVBNTcwNTJENDM2Qk"
      KAFKA_LOG_DIRS: "/var/lib/kafka/data"
      # Tune JVM for local dev
      KAFKA_HEAP_OPTS: "-Xms512m -Xmx1g"
      KAFKA_LOG_RETENTION_HOURS: "168"
      KAFKA_LOG_RETENTION_BYTES: "1073741824"
    ports:
      - "${KAFKA_PORT:-20000}:9092"
    restart: unless-stopped
    volumes:
      - kafka_data:/var/lib/kafka/data
      - ./kafka-logs:/var/log/kafka
    healthcheck:
      # Lightweight healthcheck: wait until the broker port is listening
      test: ["CMD-SHELL", "</dev/tcp/0.0.0.0/9092 >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 40s
    mem_limit: 4g
    cpus: "2"

  redis:
    image: redis:7-alpine
    container_name: somaAgent01_redis
    profiles: ["core"]
    command: ["redis-server", "--save", "60", "1", "--appendonly", "yes", "--appendfsync", "everysec"]
    ports:
      - "${REDIS_PORT:-20001}:6379"
    restart: unless-stopped
    volumes:
      - redis_data:/data
      - ./redis-conf:/usr/local/etc/redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
    mem_limit: 1g
    cpus: "1"

  postgres:
    image: postgres:16-alpine
    container_name: somaAgent01_postgres
    profiles: ["core"]
    environment:
      POSTGRES_USER: soma
      POSTGRES_PASSWORD: soma
      POSTGRES_DB: somaagent01
      OPENFGA_POSTGRES_USER: openfga
      OPENFGA_POSTGRES_PASSWORD: openfga
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-20002}:5432"
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-backups:/backups
      - ./infra/postgres/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U soma -d somaagent01"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 40s
    mem_limit: 2g
    cpus: "2"

  opa:
    image: openpolicyagent/opa:0.64.0
    container_name: somaAgent01_opa
    profiles: ["core"]
    command: ["run", "--server", "--set=decision_logs.console=true"]
    ports:
      - "${OPA_PORT:-20009}:8181"
    restart: unless-stopped

  conversation-worker:
    <<: *agent-service
    container_name: somaAgent01_conversation-worker
    profiles: ["dev"]
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    environment:
      <<: *agent-env
      # Run worker in DEV so it honors SLM_API_KEY for direct LLM calls in development.
      # In non‑DEV the worker fetches credentials from Gateway via internal token.
      SOMA_AGENT_MODE: DEV
      # Use real LLM (OpenAI-compatible). In DEV, env override is allowed; in non‑DEV the worker ignores env and fetches from Gateway.
      SLM_BASE_URL: "${SLM_BASE_URL:-https://api.groq.com/openai/v1}"
      SLM_MODEL: "${SLM_MODEL:-openai/gpt-oss-120b}"
      SLM_API_KEY: "${SLM_API_KEY:-}"
      WORKER_GATEWAY_BASE: "http://gateway:8010"
      # Gateway-side internal token used for worker-only credential fetch
      GATEWAY_INTERNAL_TOKEN: "${GATEWAY_INTERNAL_TOKEN:-dev-internal-token}"
    command:
      - python3
      - -m
      - services.conversation_worker.main

  tool-executor:
    <<: *agent-service
    container_name: somaAgent01_tool-executor
    profiles: ["dev"]
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    command:
      - python3
      - -m
      - services.tool_executor.main

  memory-replicator:
    <<: *agent-service
    container_name: somaAgent01_memory-replicator
    profiles: ["dev"]
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    command:
      - python3
      - -m
      - services.memory_replicator.main

  memory-sync:
    <<: *agent-service
    container_name: somaAgent01_memory-sync
    profiles: ["dev"]
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    command:
      - python3
      - -m
      - services.memory_sync.main

  # memory-service removed; SomaBrain HTTP is used directly by services

  gateway:
    <<: *agent-service
    container_name: somaAgent01_gateway
    profiles: ["dev"]
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    command:
      - python3
      - -m
      - uvicorn
      - services.gateway.main:app
      - --host
      - 0.0.0.0
      - --port
      - "8010"
    environment:
      <<: *agent-env
      PORT: "8010"
      # Encryption key (Fernet urlsafe base64) required to store provider secrets securely
      # Dev-safe Fernet key (urlsafe base64 32-byte). Replace with a secure value in staging/prod.
      GATEWAY_ENC_KEY: "${GATEWAY_ENC_KEY:-O6qM9Oe7zB3w6CqQFctciVwEciXxV9nOcDSBxPTsPOg=}"
      GATEWAY_INTERNAL_TOKEN: "${GATEWAY_INTERNAL_TOKEN:-dev-internal-token}"
      # For local development default to false to simplify testing. Set the
      # environment variable to 'true' in staging/production as needed.
      GATEWAY_REQUIRE_AUTH: ${GATEWAY_REQUIRE_AUTH:-false}
      # Enable write-through to SomaBrain in dev so WAL is emitted immediately.
      GATEWAY_WRITE_THROUGH: "true"
      GATEWAY_WRITE_THROUGH_ASYNC: "true"
    ports:
      - "${GATEWAY_PORT:-20016}:8010"
    networks:
      - default
      - somaagent01_dev

  outbox-sync:
    <<: *agent-service
    container_name: somaAgent01_outbox-sync
    profiles: ["dev"]
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    command:
      - python3
      - -m
      - services.outbox_sync.main
    environment:
      <<: *agent-env
      OUTBOX_SYNC_BATCH_SIZE: "200"
      OUTBOX_SYNC_INTERVAL_SECONDS: "1.0"
      OUTBOX_SYNC_MAX_RETRIES: "8"
      OUTBOX_SYNC_BACKOFF_BASE_SECONDS: "1.0"
      OUTBOX_SYNC_BACKOFF_MAX_SECONDS: "60.0"
      OUTBOX_SYNC_METRICS_PORT: "9415"

networks:
  default:
    external: true
    name: somaagent01
  somaagent01_dev:
    external: true
    name: somaagent01_dev

volumes:
  kafka_data:
  redis_data:
  postgres_data:
