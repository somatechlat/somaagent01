# Minimal, validated infra compose for local SomaAgent01

x-agent-env: &agent-env
  PYTHONPATH: /git/agent-zero:/a0
  LOG_LEVEL: INFO
  KAFKA_BOOTSTRAP_SERVERS: kafka:9092
  REDIS_URL: redis://redis:6379/0
  POSTGRES_DSN: postgresql://soma:soma@postgres:5432/somaagent01
  POLICY_BASE_URL: http://opa:8181
  POLICY_DATA_PATH: /v1/data/soma/allow
  POLICY_FAIL_OPEN: "false"
  OPA_URL: http://opa:8181
  CONVERSATION_INBOUND: conversation.inbound
  CONVERSATION_OUTBOUND: conversation.outbound
  CONVERSATION_GROUP: conversation-worker
  TOOL_REQUESTS_TOPIC: tool.requests
  TOOL_RESULTS_TOPIC: tool.results
  TOOL_EXECUTOR_GROUP: tool-executor
  MEMORY_SERVICE_TARGET: memory-service:20017
  SOMA_AGENT_MODE: LOCAL
  SOMA_BASE_URL: http://host.docker.internal:9696
  SOMA_CONTAINER_HOST_ALIAS: host.docker.internal
  SOMA_ENABLED: "true"
  GATEWAY_JWT_SECRET: ${GATEWAY_JWT_SECRET:-changeme}

x-agent-depends: &agent-depends
  kafka:
    condition: service_healthy
  postgres:
    condition: service_healthy
  redis:
    condition: service_healthy
  opa:
    condition: service_started

x-agent-service: &agent-service
  image: somaagent01-dev:latest
  build:
    context: ..
    dockerfile: DockerfileLocal
    args:
      TORCH_VARIANT: ${TORCH_VARIANT:-none}
      ENABLE_TORCH: "false"
      FEATURE_AI: "basic"
      FEATURE_AUDIO: "none"
  working_dir: /a0
  volumes:
    - ../a0_data:/a0
  extra_hosts:
    - "host.docker.internal:host-gateway"
  depends_on: *agent-depends
  restart: unless-stopped

services:
  kafka:
    image: bitnami/kafka:latest
    container_name: somaAgent01_kafka
    profiles: ["core"]
    environment:
      KAFKA_CFG_NODE_ID: "0"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "0@kafka:9093"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_NUM_PARTITIONS: "3"
      KAFKA_CFG_MAX_REQUEST_SIZE: "2147483647"
      KAFKA_CFG_SOCKET_REQUEST_MAX_BYTES: "2147483647"
      KAFKA_CFG_MESSAGE_MAX_BYTES: "2147483647"
      KAFKA_CLUSTER_ID: "kcqIv3RutQm49oJm9sYzVg"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_KRAFT_CLUSTER_ID: "soma-cluster-01"
      KAFKA_HEAP_OPTS: "-Xms1g -Xmx2g"
      BITNAMI_DEBUG: "true"
    ports:
      - "${KAFKA_PORT:-20000}:9092"
    restart: unless-stopped
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD", "true"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 300s
    mem_limit: 4g
    cpus: "2"

  redis:
    image: redis:7-alpine
    container_name: somaAgent01_redis
    profiles: ["core"]
    command: ["redis-server", "--save", "--appendonly", "yes"]
    ports:
      - "${REDIS_PORT:-20001}:6379"
    restart: unless-stopped
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
    mem_limit: 1g
    cpus: "1"

  postgres:
    image: postgres:16-alpine
    container_name: somaAgent01_postgres
    profiles: ["core"]
    environment:
      POSTGRES_USER: soma
      POSTGRES_PASSWORD: soma
      POSTGRES_DB: somaagent01
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-20002}:5432"
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U soma -d somaagent01"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 40s
    mem_limit: 2g
    cpus: "2"

  opa:
    image: openpolicyagent/opa:0.64.0
    container_name: somaAgent01_opa
    profiles: ["core"]
    command: ["run", "--server", "--set=decision_logs.console=true"]
    ports:
      - "${OPA_PORT:-20009}:8181"
    restart: unless-stopped

  openfga-migrate:
    image: openfga/openfga:v1.8.3
    container_name: somaAgent01_openfga-migrate
    profiles: ["core"]
    restart: "no"
    command:
      - migrate
      - --datastore-engine
      - postgres
      - --datastore-uri
      - "postgres://openfga:openfga@postgres:5432/openfga?sslmode=disable"
      - --datastore-username
      - openfga
      - --datastore-password
      - openfga
    depends_on:
      postgres:
        condition: service_healthy

  openfga:
    build:
      context: ..
      dockerfile: docker/openfga/Dockerfile
    image: somaagent01-openfga:latest
    container_name: somaAgent01_openfga
    environment:
      OPENFGA_GRPC_ADDR: 0.0.0.0:8081
      OPENFGA_HTTP_ADDR: 0.0.0.0:8080
      OPENFGA_DATASTORE_ENGINE: postgres
      OPENFGA_DATASTORE_URI: "postgres://openfga:openfga@postgres:5432/openfga?sslmode=disable"
    ports:
      - "${OPENFGA_GRPC_PORT:-20010}:8081"
      - "${OPENFGA_HTTP_PORT:-20011}:8080"
    restart: unless-stopped
    mem_limit: 2g
    cpus: "1"
    depends_on:
      postgres:
        condition: service_healthy
      openfga-migrate:
        condition: service_completed_successfully

  conversation-worker:
    <<: *agent-service
    container_name: somaAgent01_conversation-worker
    profiles: ["dev"]
    command:
      - python3
      - -m
      - services.conversation_worker.main

  tool-executor:
    <<: *agent-service
    container_name: somaAgent01_tool-executor
    profiles: ["dev"]
    command:
      - python3
      - -m
      - services.tool_executor.main

  memory-service:
    <<: *agent-service
    container_name: somaAgent01_memory-service
    profiles: ["dev"]
    command:
      - python3
      - -m
      - services.memory_service.main
    environment:
      <<: *agent-env
      MEMORY_SERVICE_PORT: "${MEMORY_SERVICE_PORT:-20017}"
    ports:
      - "${MEMORY_SERVICE_PORT:-20017}:${MEMORY_SERVICE_PORT:-20017}"
    depends_on:
      postgres:
        condition: service_healthy

  agent-ui:
    <<: *agent-service
    container_name: somaAgent01_agent-ui
    profiles: ["dev"]
    command: ["/exe/initialize.sh", "development"]
    ports:
      - "${AGENT_UI_PORT:-20015}:80"

  gateway:
    <<: *agent-service
    container_name: somaAgent01_gateway
    command:
      - python3
      - -m
      - uvicorn
      - services.gateway.main:app
      - --host
      - 0.0.0.0
      - --port
      - "8010"
    environment:
      <<: *agent-env
      PORT: "8010"
      GATEWAY_REQUIRE_AUTH: ${GATEWAY_REQUIRE_AUTH:-true}
    ports:
      - "${GATEWAY_PORT:-20016}:8010"

networks:
  default:
    external: true
    name: somaagent01

volumes:
  kafka_data:
  redis_data:
  postgres_data:

