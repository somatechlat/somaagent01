# Use the pre-built base image for A0
# FROM agent-zero-base:local
FROM agent0ai/agent-zero-base:latest

# Increase HTTP timeout for uv to reduce transient download failures
ENV UV_HTTP_TIMEOUT=180

# Set BRANCH to "local" if not provided
ARG BRANCH=local
ENV BRANCH=$BRANCH
 
# Build-time toggles for feature-based installation
# SERVICE: optional service name to include specific runtime deps (e.g. memory_service)
# K8S: optional flag for k8s-tuned builds (not changing entrypoint or compose behavior)
ARG SERVICE=""
ARG K8S=false

# Feature flags for modular installation
ARG FEATURE_AI=basic
ARG FEATURE_AUDIO=none
ARG FEATURE_BROWSER=true
ARG FEATURE_DOCUMENTS=true
ARG FEATURE_DATABASE=true
ARG FEATURE_MONITORING=false
ARG FEATURE_DEV=true
ARG FEATURE_GRPC=false
ARG FEATURE_INTEGRATIONS=true
ARG TORCH_VARIANT=none
ARG ENABLE_TORCH=false

ENV TORCH_VARIANT=$TORCH_VARIANT
ENV ENABLE_TORCH=$ENABLE_TORCH

# Copy filesystem files to root
COPY ./docker/run/fs/ /
# Copy current development files to git, they will only be used in "local" branch
# Provide local sources for BRANCH=local builds (required by /ins/install_A0.sh)
COPY ./ /git/agent-zero

# pre installation steps
RUN bash /ins/pre_install.sh $BRANCH

# Prepare a dedicated venv that exposes system site packages so apt-provided wheels stay visible.
RUN apt-get update && apt-get install -y python3-venv python3-pip && \
    python3 -m venv --system-site-packages /venv && \
    /venv/bin/pip install --upgrade pip setuptools wheel && \
    apt-get clean && rm -rf /var/lib/apt/lists/* && \
    echo "export PATH=/venv/bin:\$PATH" > /etc/profile.d/venv_path.sh

# Make sure the container runtime uses the venv by default
ENV PATH="/venv/bin:${PATH}"

# install A0 (full/dev image only) using the new canonical installer
RUN if [ -z "$SERVICE" ]; then \
        bash /ins/install.sh $BRANCH; \
    else \
        echo "Skipping canonical installation for SERVICE=$SERVICE"; \
    fi

# install additional software (full/dev image only)
RUN if [ -z "$SERVICE" ]; then bash /ins/install_additional.sh $BRANCH; else echo "Skipping install_additional.sh for SERVICE=$SERVICE"; fi



# post installation steps (full/dev image only)
RUN if [ -z "$SERVICE" ]; then bash /ins/post_install.sh $BRANCH; else echo "Skipping post_install.sh for SERVICE=$SERVICE"; fi

# Minimal extras required at runtime but not carried in upstream requirements.
RUN /venv/bin/pip install --no-cache-dir supervisor jsonschema \
    && /venv/bin/pip install --no-cache-dir \
        "asyncpg>=0.29" \
        "langchain<0.2"

# Whisper installation is now handled by modular installer based on FEATURE_AUDIO

# Torch installation handled by modular installer based on FEATURE_AI 

# Playwright installation handled by modular installer based on FEATURE_BROWSER

# Install asyncpg for async PostgreSQL access (memory_service, gateway and full/dev)
# Use the distribution package for the full/dev image to avoid compiling wheels on Python 3.13.
RUN if [ -z "$SERVICE" ] || [ "$SERVICE" = "gateway" ] || [ "$SERVICE" = "memory_service" ]; then \
        apt-get update && apt-get install -y python3-asyncpg && \
        apt-get clean && rm -rf /var/lib/apt/lists/*; \
    else \
        echo "Skipping asyncpg for SERVICE=$SERVICE"; \
    fi

# Install gRPC runtime for memory service (and full/dev)
# Use the distribution package for grpc runtime to avoid building grpc C extensions in the image.
RUN if [ -z "$SERVICE" ] || [ "$SERVICE" = "memory_service" ]; then \
    apt-get update && apt-get install -y python3-grpcio && \
    apt-get clean && rm -rf /var/lib/apt/lists/*; \
    else \
        echo "Skipping grpcio for SERVICE=$SERVICE"; \
    fi

# Install per-service runtime requirements (kept minimal, optional)
# This enables single-source per-service builds without altering compose behavior.
COPY services/memory_service/requirements.txt /tmp/memory_service.requirements.txt
RUN if [ -f /tmp/memory_service.requirements.txt ] && [ "$SERVICE" = "memory_service" ]; then \
            python3 -m pip install --break-system-packages -r /tmp/memory_service.requirements.txt; \
        fi

# Expose ports
EXPOSE 22 80 9000-9009 20017

RUN chmod +x /exe/initialize.sh /exe/run_A0.sh /exe/run_searxng.sh /exe/run_tunnel_api.sh

# initialize runtime and switch to supervisord
CMD ["/exe/initialize.sh", "$BRANCH"]
